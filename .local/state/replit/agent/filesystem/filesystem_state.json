{"file_contents":{"README.md":{"content":"# Welcome to your Expo app 👋\n\nThis is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).\n\n## Get started\n\n1. Install dependencies\n\n   ```bash\n   npm install\n   ```\n\n2. Start the app\n\n   ```bash\n   npx expo start\n   ```\n\nIn the output, you'll find options to open the app in a\n\n- [development build](https://docs.expo.dev/develop/development-builds/introduction/)\n- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)\n- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)\n- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo\n\nYou can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).\n\n## Get a fresh project\n\nWhen you're ready, run:\n\n```bash\nnpm run reset-project\n```\n\nThis command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.\n\n## Learn more\n\nTo learn more about developing your project with Expo, look at the following resources:\n\n- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).\n- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.\n\n## Join the community\n\nJoin our community of developers creating universal apps.\n\n- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.\n- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.\n\"# lakes\" \n","size_bytes":1752},"eslint.config.js":{"content":"// https://docs.expo.dev/guides/using-eslint/\nconst { defineConfig } = require('eslint/config');\nconst expoConfig = require('eslint-config-expo/flat');\n\nmodule.exports = defineConfig([\n  expoConfig,\n  {\n    ignores: ['dist/*'],\n  },\n]);\n","size_bytes":237},"firebaseConfig.ts":{"content":"// firebase.js\n\n// Firebase core\nimport { initializeApp } from \"firebase/app\";\n\n// Auth\nimport { getAuth } from \"firebase/auth\";\n\n// Firestore\nimport { getFirestore } from \"firebase/firestore\";\n\n// Firebase config — replace with your own from Firebase Console\nconst firebaseConfig = {\n apiKey: \"AIzaSyCa4IVNZWaW41Lt-zm4TzKvURv2q4qM6io\",\n  authDomain: \"storeshop-1b056.firebaseapp.com\",\n  projectId: \"storeshop-1b056\",\n  storageBucket: \"storeshop-1b056.firebasestorage.app\",\n  messagingSenderId: \"621075712142\",\n  appId: \"1:621075712142:web:62347e94419db8e36ca1df\",\n  measurementId: \"G-ZPRGDHWYVS\"\n};\n\n// Initialize Firebase App\nconst app = initializeApp(firebaseConfig);\n\n// Export Firebase services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\n// Export Firestore document reference helper\nexport { doc as firestoreDoc } from \"firebase/firestore\";\n","size_bytes":878},"metro.config.js":{"content":"const { getDefaultConfig } = require('@expo/metro-config');\n\nconst config = getDefaultConfig(__dirname);\n\n// ✅ Add support for .cjs and .mjs extensions\nconfig.resolver.sourceExts.push('cjs', 'mjs');\n\n// ✅ Prevent Metro from misreading newer Firebase SDKs\nconfig.resolver.unstable_enablePackageExports = false;\n\n// ✅ Configure for Replit - allow all hosts for proxy\nconfig.server = {\n  ...config.server,\n  enhanceMiddleware: (middleware, server) => {\n    return (req, res, next) => {\n      // Allow all origins for Replit proxy\n      res.setHeader('Access-Control-Allow-Origin', '*');\n      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n      res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n      return middleware(req, res, next);\n    };\n  }\n};\n\nmodule.exports = config;\n","size_bytes":843},"app/_layout.tsx":{"content":"import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { View } from 'react-native';\n\nfunction InnerLayout() {\n  const insets = useSafeAreaInsets();\n\n  return (\n    <View style={{ flex: 1, paddingTop: insets.top, paddingBottom: insets.bottom }}>\n      <StatusBar style=\"dark\" translucent backgroundColor=\"transparent\" />\n      <Stack\n        screenOptions={{\n          headerShown: false,\n          contentStyle: { backgroundColor: 'white' },\n        }}\n      />\n    </View>\n  );\n}\n\nexport default function RootLayout() {\n  return (\n    <SafeAreaProvider>\n      <InnerLayout />\n    </SafeAreaProvider>\n  );\n}\n","size_bytes":729},"app/account.tsx":{"content":"import { Ionicons } from '@expo/vector-icons';\nimport { useRouter } from 'expo-router';\nimport {\n  getAuth,\n  signOut\n} from 'firebase/auth';\nimport {\n  doc,\n  onSnapshot,\n  Unsubscribe,\n  updateDoc\n} from 'firebase/firestore';\nimport React, { useEffect, useState } from 'react';\nimport {\n  ActivityIndicator,\n  Alert,\n  Image,\n  Modal,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View\n} from 'react-native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { db } from '../firebaseConfig'; // Adjust path as needed\n\ninterface AddressObject {\n  street?: string;\n  city?: string;\n  state?: string;\n  pincode?: string;\n  formatted?: string;\n}\n\ninterface UserProfile {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  address?: string | AddressObject;\n  city?: string;\n  state?: string;\n  zipCode?: string;\n  profileImage?: string;\n  dateOfBirth?: string;\n  createdAt?: any;\n  updatedAt?: any;\n}\n\ninterface EditModalProps {\n  visible: boolean;\n  title: string;\n  field: keyof UserProfile;\n  value: string;\n  onClose: () => void;\n  onSave: (field: keyof UserProfile, value: string) => void;\n  placeholder?: string;\n  multiline?: boolean;\n}\n\nconst EditModal: React.FC<EditModalProps> = ({\n  visible,\n  title,\n  field,\n  value,\n  onClose,\n  onSave,\n  placeholder,\n  multiline = false\n}) => {\n  const [inputValue, setInputValue] = useState(value);\n\n  useEffect(() => {\n    setInputValue(value);\n  }, [value]);\n\n  const handleSave = () => {\n    if (inputValue.trim()) {\n      onSave(field, inputValue.trim());\n      onClose();\n    }\n  };\n\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"slide\"\n      transparent={true}\n      onRequestClose={onClose}\n    >\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContent}>\n          <View style={styles.modalHeader}>\n            <Text style={styles.modalTitle}>{title}</Text>\n            <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n              <Ionicons name=\"close\" size={24} color=\"#666\" />\n            </TouchableOpacity>\n          </View>\n          \n          <TextInput\n            style={[\n              styles.modalInput,\n              multiline && styles.multilineInput\n            ]}\n            value={inputValue}\n            onChangeText={setInputValue}\n            placeholder={placeholder}\n            multiline={multiline}\n            numberOfLines={multiline ? 4 : 1}\n            autoFocus\n          />\n          \n          <View style={styles.modalButtons}>\n            <TouchableOpacity \n              style={[styles.modalButton, styles.cancelButton]} \n              onPress={onClose}\n            >\n              <Text style={styles.cancelButtonText}>Cancel</Text>\n            </TouchableOpacity>\n            <TouchableOpacity \n              style={[styles.modalButton, styles.saveButton]} \n              onPress={handleSave}\n            >\n              <Text style={styles.saveButtonText}>Save</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nconst ProfilePage: React.FC = () => {\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [updating, setUpdating] = useState(false);\n  const [editModal, setEditModal] = useState<{\n    visible: boolean;\n    field: keyof UserProfile;\n    title: string;\n    placeholder?: string;\n    multiline?: boolean;\n  }>({\n    visible: false,\n    field: 'name',\n    title: '',\n  });\n\n  const router = useRouter();\n  const auth = getAuth();\n  const currentUser = auth.currentUser;\n\n  useEffect(() => {\n    if (!currentUser) {\n      router.replace('/(auth)/login'); // Update path to match your auth structure\n      return;\n    }\n\n    // Set up real-time listener for user profile\n    const userDocRef = doc(db, 'users', currentUser.uid);\n    \n    const unsubscribe: Unsubscribe = onSnapshot(\n      userDocRef,\n      (docSnapshot) => {\n        if (docSnapshot.exists()) {\n          const userData = docSnapshot.data() as Omit<UserProfile, 'id'>;\n          setUserProfile({\n            id: docSnapshot.id,\n            ...userData,\n          });\n        } else {\n          // Create initial profile if doesn't exist\n          createInitialProfile();\n        }\n        setLoading(false);\n      },\n      (error) => {\n        console.error('Error fetching user profile:', error);\n        setLoading(false);\n        Alert.alert('Error', 'Failed to load profile data');\n      }\n    );\n\n    // Also listen to auth state changes\n    const authUnsubscribe = auth.onAuthStateChanged((user) => {\n      if (!user) {\n        // User is signed out, navigate to login\n        router.replace('/(auth)/login');\n      }\n    });\n\n    return () => {\n      unsubscribe();\n      authUnsubscribe();\n    };\n  }, [currentUser]);\n\n  const createInitialProfile = async () => {\n    if (!currentUser) return;\n\n    const initialProfile = {\n      name: currentUser.displayName || 'User',\n      email: currentUser.email || '',\n      phone: '',\n      address: '',\n      city: '',\n      state: '',\n      zipCode: '',\n      profileImage: currentUser.photoURL || '',\n      dateOfBirth: '',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    try {\n      const userDocRef = doc(db, 'users', currentUser.uid);\n      await updateDoc(userDocRef, initialProfile);\n    } catch (error) {\n      console.error('Error creating initial profile:', error);\n    }\n  };\n\n  const handleEditField = (\n    field: keyof UserProfile, \n    title: string, \n    placeholder?: string,\n    multiline?: boolean\n  ) => {\n    setEditModal({\n      visible: true,\n      field,\n      title,\n      placeholder,\n      multiline,\n    });\n  };\n\n  const handleSaveField = async (field: keyof UserProfile, value: string) => {\n    if (!currentUser || !userProfile) return;\n\n    setUpdating(true);\n    try {\n      const userDocRef = doc(db, 'users', currentUser.uid);\n      \n      // Handle different field types\n      let updateData: any = {\n        [field]: value,\n        updatedAt: new Date(),\n      };\n\n      // If updating address and current address is an object, preserve structure\n      if (field === 'address' && typeof userProfile.address === 'object') {\n        updateData.address = {\n          ...userProfile.address,\n          formatted: value,\n          street: value, // Also update street field\n        };\n      }\n\n      await updateDoc(userDocRef, updateData);\n      \n      Alert.alert('Success', 'Profile updated successfully');\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      Alert.alert('Error', 'Failed to update profile');\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    Alert.alert(\n      'Sign Out',\n      'Are you sure you want to sign out?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Sign Out',\n          style: 'destructive',\n          onPress: async () => {\n            setUpdating(true);\n            try {\n              // Clear any listeners or timers before signing out\n              await signOut(auth);\n              \n              // Force navigation to login screen\n              router.dismissAll();\n              router.replace('/(auth)/login');\n              \n              // Alternative navigation options if above doesn't work:\n              // router.push('/login');\n              // or if using different route structure:\n              // router.replace('/auth/login');\n              \n            } catch (error: any) {\n              console.error('Error signing out:', error);\n              \n              // Show specific error message\n              const errorMessage = error.message || 'Failed to sign out. Please try again.';\n              Alert.alert(\n                'Sign Out Error', \n                errorMessage,\n                [\n                  {\n                    text: 'Retry',\n                    onPress: () => handleSignOut(),\n                  },\n                  {\n                    text: 'Force Sign Out',\n                    style: 'destructive',\n                    onPress: () => forceSignOut(),\n                  }\n                ]\n              );\n            } finally {\n              setUpdating(false);\n            }\n          },\n        },\n      ]\n    );\n  };\n\n  // Force sign out function for cases where normal sign out fails\n  const forceSignOut = async () => {\n    try {\n      // Clear any local storage or cached data\n      // Note: Don't use localStorage in React Native, but clear any AsyncStorage if you're using it\n      \n      // Force auth state to null\n      await signOut(auth);\n      \n      // Force navigation\n      router.dismissAll();\n      router.replace('/(auth)/login');\n      \n    } catch (error) {\n      console.error('Force sign out error:', error);\n      // As last resort, just navigate away\n      router.replace('/(auth)/login');\n    }\n  };\n\n  // Helper function to format address\n  const formatAddressValue = (address: string | AddressObject | undefined): string => {\n    if (!address) return '';\n    \n    if (typeof address === 'string') {\n      return address;\n    }\n    \n    if (typeof address === 'object') {\n      // If it has a formatted field, use that\n      if (address.formatted) {\n        return address.formatted;\n      }\n      \n      // Otherwise, construct from parts\n      const parts = [\n        address.street,\n        address.city,\n        address.state,\n        address.pincode\n      ].filter(Boolean);\n      \n      return parts.join(', ');\n    }\n    \n    return '';\n  };\n\n  // Helper function to get individual address field\n  const getAddressField = (address: string | AddressObject | undefined, field: keyof AddressObject): string => {\n    if (!address) return '';\n    \n    if (typeof address === 'object' && address[field]) {\n      return address[field] || '';\n    }\n    \n    return '';\n  };\n\n  const ProfileItem: React.FC<{\n    icon: string;\n    label: string;\n    value: string | AddressObject | undefined;\n    onPress: () => void;\n    editable?: boolean;\n    isAddress?: boolean;\n  }> = ({ icon, label, value, onPress, editable = true, isAddress = false }) => {\n    \n    const displayValue = isAddress \n      ? formatAddressValue(value as string | AddressObject)\n      : (typeof value === 'string' ? value : '');\n\n    return (\n      <TouchableOpacity \n        style={styles.profileItem} \n        onPress={onPress}\n        disabled={!editable}\n      >\n        <View style={styles.profileItemLeft}>\n          <Ionicons name={icon as any} size={20} color=\"#007AFF\" />\n          <View style={styles.profileItemText}>\n            <Text style={styles.profileItemLabel}>{label}</Text>\n            <Text style={styles.profileItemValue}>\n              {displayValue || 'Not provided'}\n            </Text>\n          </View>\n        </View>\n        {editable && (\n          <Ionicons name=\"chevron-forward\" size={20} color=\"#C7C7CC\" />\n        )}\n      </TouchableOpacity>\n    );\n  };\n\n  if (loading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color=\"#007AFF\" />\n          <Text style={styles.loadingText}>Loading profile...</Text>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  if (!userProfile) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.errorContainer}>\n          <Text style={styles.errorText}>Failed to load profile</Text>\n          <TouchableOpacity \n            style={styles.retryButton}\n            onPress={() => setLoading(true)}\n          >\n            <Text style={styles.retryButtonText}>Retry</Text>\n          </TouchableOpacity>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>\n        {/* Header */}\n        <View style={styles.header}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => router.back()}\n          >\n            <Ionicons name=\"arrow-back\" size={24} color=\"#007AFF\" />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>Profile</Text>\n          <TouchableOpacity \n            style={styles.signOutButton}\n            onPress={handleSignOut}\n          >\n            <Ionicons name=\"log-out-outline\" size={24} color=\"#FF3B30\" />\n          </TouchableOpacity>\n        </View>\n\n        {/* Profile Image and Basic Info */}\n        <View style={styles.profileHeader}>\n          <View style={styles.profileImageContainer}>\n            {userProfile.profileImage ? (\n              <Image \n                source={{ uri: userProfile.profileImage }} \n                style={styles.profileImage} \n              />\n            ) : (\n              <View style={styles.profileImagePlaceholder}>\n                <Ionicons name=\"person\" size={40} color=\"#C7C7CC\" />\n              </View>\n            )}\n            <TouchableOpacity \n              style={styles.editImageButton}\n              onPress={() => {\n                // Implement image picker functionality\n                Alert.alert('Coming Soon', 'Image upload functionality will be added');\n              }}\n            >\n              <Ionicons name=\"camera\" size={16} color=\"#FFF\" />\n            </TouchableOpacity>\n          </View>\n          <Text style={styles.profileName}>{userProfile.name}</Text>\n          <Text style={styles.profileEmail}>{userProfile.email}</Text>\n        </View>\n\n        {/* Profile Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Personal Information</Text>\n          \n          <ProfileItem\n            icon=\"person-outline\"\n            label=\"Full Name\"\n            value={userProfile.name}\n            onPress={() => handleEditField('name', 'Edit Name', 'Enter your full name')}\n          />\n          \n          <ProfileItem\n            icon=\"call-outline\"\n            label=\"Phone Number\"\n            value={userProfile.phone || ''}\n            onPress={() => handleEditField('phone', 'Edit Phone', 'Enter your phone number')}\n          />\n          \n          <ProfileItem\n            icon=\"calendar-outline\"\n            label=\"Date of Birth\"\n            value={userProfile.dateOfBirth || ''}\n            onPress={() => handleEditField('dateOfBirth', 'Edit Date of Birth', 'MM/DD/YYYY')}\n          />\n          \n          <ProfileItem\n            icon=\"mail-outline\"\n            label=\"Email Address\"\n            value={userProfile.email}\n            onPress={() => Alert.alert('Info', 'Email cannot be changed from here')}\n            editable={false}\n          />\n        </View>\n\n        {/* Address Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Address Information</Text>\n          \n          <ProfileItem\n            icon=\"location-outline\"\n            label=\"Street Address\"\n            value={userProfile.address}\n            onPress={() => handleEditField('address', 'Edit Address', 'Enter your street address', true)}\n            isAddress={true}\n          />\n          \n          <ProfileItem\n            icon=\"business-outline\"\n            label=\"City\"\n            value={typeof userProfile.address === 'object' ? getAddressField(userProfile.address, 'city') : userProfile.city || ''}\n            onPress={() => handleEditField('city', 'Edit City', 'Enter your city')}\n          />\n          \n          <ProfileItem\n            icon=\"map-outline\"\n            label=\"State\"\n            value={typeof userProfile.address === 'object' ? getAddressField(userProfile.address, 'state') : userProfile.state || ''}\n            onPress={() => handleEditField('state', 'Edit State', 'Enter your state')}\n          />\n          \n          <ProfileItem\n            icon=\"mail-open-outline\"\n            label=\"ZIP Code\"\n            value={typeof userProfile.address === 'object' ? getAddressField(userProfile.address, 'pincode') : userProfile.zipCode || ''}\n            onPress={() => handleEditField('zipCode', 'Edit ZIP Code', 'Enter your ZIP code')}\n          />\n        </View>\n\n        {/* Account Actions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Account</Text>\n          \n          <TouchableOpacity \n            style={styles.actionItem}\n            onPress={() => {\n              // Implement change password functionality\n              Alert.alert('Coming Soon', 'Change password functionality will be added');\n            }}\n          >\n            <View style={styles.profileItemLeft}>\n              <Ionicons name=\"lock-closed-outline\" size={20} color=\"#FF9500\" />\n              <Text style={styles.actionItemText}>Change Password</Text>\n            </View>\n            <Ionicons name=\"chevron-forward\" size={20} color=\"#C7C7CC\" />\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.actionItem}\n            onPress={handleSignOut}\n          >\n            <View style={styles.profileItemLeft}>\n              <Ionicons name=\"log-out-outline\" size={20} color=\"#FF3B30\" />\n              <Text style={[styles.actionItemText, { color: '#FF3B30' }]}>\n                Sign Out\n              </Text>\n            </View>\n            <Ionicons name=\"chevron-forward\" size={20} color=\"#C7C7CC\" />\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n\n      {/* Edit Modal */}\n      <EditModal\n        visible={editModal.visible}\n        title={editModal.title}\n        field={editModal.field}\n        value={(() => {\n          const fieldValue = userProfile[editModal.field];\n          if (editModal.field === 'address' && typeof fieldValue === 'object') {\n            return formatAddressValue(fieldValue);\n          }\n          return fieldValue as string || '';\n        })()}\n        onClose={() => setEditModal({ ...editModal, visible: false })}\n        onSave={handleSaveField}\n        placeholder={editModal.placeholder}\n        multiline={editModal.multiline}\n      />\n\n      {/* Loading Overlay */}\n      {updating && (\n        <View style={styles.loadingOverlay}>\n          <View style={styles.loadingCard}>\n            <ActivityIndicator size=\"large\" color=\"#007AFF\" />\n            <Text style={styles.loadingText}>Updating...</Text>\n          </View>\n        </View>\n      )}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F2F2F7',\n  },\n  scrollView: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: '#FFF',\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E5EA',\n  },\n  backButton: {\n    padding: 4,\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#000',\n  },\n  signOutButton: {\n    padding: 4,\n  },\n  profileHeader: {\n    alignItems: 'center',\n    paddingVertical: 32,\n    backgroundColor: '#FFF',\n    marginBottom: 20,\n  },\n  profileImageContainer: {\n    position: 'relative',\n    marginBottom: 16,\n  },\n  profileImage: {\n    width: 100,\n    height: 100,\n    borderRadius: 50,\n  },\n  profileImagePlaceholder: {\n    width: 100,\n    height: 100,\n    borderRadius: 50,\n    backgroundColor: '#F2F2F7',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  editImageButton: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    backgroundColor: '#007AFF',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 2,\n    borderColor: '#FFF',\n  },\n  profileName: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: '#000',\n    marginBottom: 4,\n  },\n  profileEmail: {\n    fontSize: 16,\n    color: '#8E8E93',\n  },\n  section: {\n    backgroundColor: '#FFF',\n    marginBottom: 20,\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderColor: '#E5E5EA',\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#000',\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n    backgroundColor: '#F2F2F7',\n    textTransform: 'uppercase',\n    fontSize: 12,\n    letterSpacing: 0.5,\n  },\n  profileItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E5EA',\n  },\n  profileItemLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  profileItemText: {\n    marginLeft: 12,\n    flex: 1,\n  },\n  profileItemLabel: {\n    fontSize: 16,\n    color: '#000',\n    marginBottom: 2,\n  },\n  profileItemValue: {\n    fontSize: 14,\n    color: '#8E8E93',\n  },\n  actionItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#E5E5EA',\n  },\n  actionItemText: {\n    fontSize: 16,\n    color: '#000',\n    marginLeft: 12,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: '#FFF',\n    borderRadius: 12,\n    padding: 20,\n    width: '90%',\n    maxWidth: 400,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#000',\n  },\n  closeButton: {\n    padding: 4,\n  },\n  modalInput: {\n    borderWidth: 1,\n    borderColor: '#E5E5EA',\n    borderRadius: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    marginBottom: 20,\n  },\n  multilineInput: {\n    height: 100,\n    textAlignVertical: 'top',\n  },\n  modalButtons: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    gap: 12,\n  },\n  modalButton: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 8,\n    minWidth: 80,\n    alignItems: 'center',\n  },\n  cancelButton: {\n    backgroundColor: '#F2F2F7',\n  },\n  saveButton: {\n    backgroundColor: '#007AFF',\n  },\n  cancelButtonText: {\n    color: '#000',\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  saveButtonText: {\n    color: '#FFF',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  loadingContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  loadingText: {\n    marginTop: 12,\n    fontSize: 16,\n    color: '#8E8E93',\n  },\n  errorContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n  },\n  errorText: {\n    fontSize: 18,\n    color: '#FF3B30',\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  retryButton: {\n    backgroundColor: '#007AFF',\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  retryButtonText: {\n    color: '#FFF',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  loadingCard: {\n    backgroundColor: '#FFF',\n    borderRadius: 12,\n    padding: 24,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n});\n\nexport default ProfilePage;","size_bytes":23486},"app/categories.tsx":{"content":"import { Feather, FontAwesome5, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { Link, useRouter } from 'expo-router';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { useEffect, useState } from 'react';\nimport { ActivityIndicator, Dimensions, FlatList, Image, SafeAreaView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { db } from '../firebaseConfig';\n\nconst { width } = Dimensions.get('window');\nconst CARD_WIDTH = (width - 45) / 2; // 15 padding on each side + 15 gap between cards\n\n// Hardcoded categories\nconst categories = [\n  {\n    id: 'all',\n    name: 'All',\n    icon: <Feather name=\"grid\" size={20} color=\"#333\" />,\n  },\n  {\n    id: 'electronics',\n    name: 'Electronics',\n    icon: <Ionicons name=\"laptop-outline\" size={20} color=\"#333\" />,\n  },\n  {\n    id: 'groceries',\n    name: 'Groceries',\n    icon: <MaterialCommunityIcons name=\"food-outline\" size={20} color=\"#333\" />,\n  },\n  {\n    id: 'stationary',\n    name: 'Stationary',\n    icon: <MaterialCommunityIcons name=\"pen\" size={20} color=\"#333\" />,\n  },\n  {\n    id: 'fruitandvegetable',\n    name: 'Fruits & Veggies',\n    icon: <FontAwesome5 name=\"apple-alt\" size={18} color=\"#333\" />,\n  }\n];\n\ninterface Product {\n  id: string;\n  name: string;\n  price: number;\n  category: string;\n  imageUrl?: string;\n}\n\nexport default function CategoriesScreen() {\n  const router = useRouter();\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedCategory, setSelectedCategory] = useState('all');\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'products'));\n        const productsData: Product[] = [];\n        \n        querySnapshot.forEach((doc) => {\n          const data = doc.data();\n          productsData.push({\n            id: doc.id,\n            name: data.name || 'Unnamed Product',\n            price: data.price || 0,\n            category: data.category || 'uncategorized',\n            imageUrl: data.imageUrl\n          });\n        });\n\n        setProducts(productsData);\n      } catch (error) {\n        console.error(\"Error fetching products: \", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProducts();\n  }, []);\n\n  const filteredProducts = selectedCategory === 'all' \n    ? products \n    : products.filter(product => product.category === selectedCategory);\n\n  const getCategoryCount = (categoryId: string) => {\n    if (categoryId === 'all') return products.length;\n    return products.filter(p => p.category === categoryId).length;\n  };\n\n  const renderCategoryItem = ({ item, index }) => (\n    <TouchableOpacity\n      style={[\n        styles.categoryItem,\n        selectedCategory === item.id && styles.selectedCategory,\n        index === 0 && styles.firstCategoryItem\n      ]}\n      onPress={() => setSelectedCategory(item.id)}\n      activeOpacity={0.8}\n    >\n      <View style={styles.categoryIcon}>{item.icon}</View>\n      <Text style={[\n        styles.categoryName,\n        selectedCategory === item.id && styles.selectedCategoryText\n      ]} numberOfLines={2}>\n        {item.name}\n      </Text>\n      <Text style={[\n        styles.categoryCount,\n        selectedCategory === item.id && styles.selectedCategoryCount\n      ]}>\n        ({getCategoryCount(item.id)})\n      </Text>\n    </TouchableOpacity>\n  );\n\n  const renderProductItem = ({ item }) => (\n    <Link href={`/products/${item.id}`} asChild>\n      <TouchableOpacity style={styles.productItem} activeOpacity={0.8}>\n        <View style={styles.productImageContainer}>\n          {item.imageUrl ? (\n            <Image \n              source={{ uri: item.imageUrl }} \n              style={styles.productImage}\n              resizeMode=\"cover\"\n            />\n          ) : (\n            <View style={[styles.productImage, styles.noImage]}>\n              <Feather name=\"image\" size={32} color=\"#bbb\" />\n            </View>\n          )}\n        </View>\n        <View style={styles.productInfo}>\n          <Text style={styles.productName} numberOfLines={2}>\n            {item.name}\n          </Text>\n          <Text style={styles.productPrice}>₹{item.price.toFixed(2)}</Text>\n          <View style={styles.categoryBadge}>\n            <Text style={styles.productCategory} numberOfLines={1}>\n              {item.category}\n            </Text>\n          </View>\n        </View>\n      </TouchableOpacity>\n    </Link>\n  );\n\n  if (loading) {\n    return (\n      <SafeAreaView style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#2196f3\" />\n        <Text style={styles.loadingText}>Loading products...</Text>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.headerContainer}>\n        <Text style={styles.header}>Categories</Text>\n      </View>\n      \n      <View style={styles.categorySection}>\n        <FlatList\n          horizontal\n          data={categories}\n          renderItem={renderCategoryItem}\n          keyExtractor={(item) => item.id}\n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={styles.categoryList}\n        />\n      </View>\n\n      <View style={styles.productsSection}>\n        <Text style={styles.subHeader}>\n          {categories.find(c => c.id === selectedCategory)?.name} Products ({filteredProducts.length})\n        </Text>\n\n        {filteredProducts.length === 0 ? (\n          <View style={styles.emptyContainer}>\n            <Feather name=\"package\" size={50} color=\"#ccc\" />\n            <Text style={styles.emptyText}>No products found in this category</Text>\n          </View>\n        ) : (\n          <FlatList\n            data={filteredProducts}\n            renderItem={renderProductItem}\n            keyExtractor={(item) => item.id}\n            numColumns={2}\n            columnWrapperStyle={styles.productRow}\n            contentContainerStyle={styles.productList}\n            showsVerticalScrollIndicator={false}\n          />\n        )}\n      </View>\n        <View style={styles.bottomNav}>\n              <TouchableOpacity \n                style={styles.navItem}\n                onPress={() => router.push('/home')}\n              >\n                <Ionicons name=\"home\" size={24} color=\"#777\" />\n                <Text style={[styles.navText, styles.activeNavText]}>Home</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity \n                style={styles.navItem}\n                onPress={() => router.push('/categories')}\n              >\n                <Ionicons name=\"grid-outline\" size={24} color=\"#FF5722\" />\n                <Text style={styles.navText}>Categories</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity \n                style={styles.navItem}\n                onPress={() => router.push('/orders')}\n              >\n                <Ionicons name=\"receipt-outline\" size={24} color=\"#777\" />\n                <Text style={styles.navText}>Orders</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity \n                style={styles.navItem}\n                onPress={() => router.push('/account')}\n              >\n                <Ionicons name=\"person-outline\" size={24} color=\"#777\" />\n                <Text style={styles.navText}>Account</Text>\n              </TouchableOpacity>\n            </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f9fa',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f8f9fa',\n  },\n  loadingText: {\n    marginTop: 15,\n    fontSize: 16,\n    color: '#666',\n  },\n  headerContainer: {\n    paddingHorizontal: 15,\n    paddingTop: 10,\n    paddingBottom: 5,\n  },\n  header: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#333',\n  },\n  categorySection: {\n    paddingVertical: 15,\n  },\n  categoryList: {\n    paddingHorizontal: 15,\n  },\n  categoryItem: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    paddingVertical: 12,\n    paddingHorizontal: 8,\n    marginRight: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.08,\n    shadowRadius: 6,\n    elevation: 3,\n    minWidth: 85,\n    minHeight: 85,\n  },\n  firstCategoryItem: {\n    marginLeft: 0,\n  },\n  selectedCategory: {\n    backgroundColor: '#2196f3',\n    shadowColor: '#2196f3',\n    shadowOpacity: 0.3,\n  },\n  categoryIcon: {\n    marginBottom: 6,\n  },\n  categoryName: {\n    fontSize: 11,\n    fontWeight: '600',\n    textAlign: 'center',\n    color: '#333',\n    lineHeight: 13,\n  },\n  selectedCategoryText: {\n    color: '#fff',\n  },\n  categoryCount: {\n    fontSize: 9,\n    color: '#666',\n    marginTop: 2,\n  },\n  selectedCategoryCount: {\n    color: '#e3f2fd',\n  },\n  productsSection: {\n    flex: 1,\n    paddingHorizontal: 15,\n  },\n  subHeader: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 15,\n    color: '#333',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 40,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: '#666',\n    marginTop: 15,\n    textAlign: 'center',\n  },\n  productList: {\n    paddingBottom: 20,\n  },\n  productRow: {\n    justifyContent: 'space-between',\n    marginBottom: 15,\n  },\n  productItem: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    width: CARD_WIDTH,\n    overflow: 'hidden',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.08,\n    shadowRadius: 6,\n    elevation: 3,\n  },\n  productImageContainer: {\n    width: '100%',\n    height: 130,\n    overflow: 'hidden',\n  },\n  productImage: {\n    width: '100%',\n    height: '100%',\n  },\n  noImage: {\n    backgroundColor: '#f5f5f5',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  productInfo: {\n    padding: 12,\n  },\n  productName: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#333',\n    marginBottom: 6,\n    lineHeight: 18,\n  },\n  productPrice: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#2196f3',\n    marginBottom: 8,\n  },\n  categoryBadge: {\n    backgroundColor: '#f0f0f0',\n    paddingHorizontal: 8,\n    paddingVertical: 3,\n    borderRadius: 12,\n    alignSelf: 'flex-start',\n  },\n    bottomNav: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    paddingVertical: 16,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: -2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 8,\n  },\n  navItem: {\n    alignItems: 'center',\n    padding: 8,\n    borderRadius: 12,\n    minWidth: 60,\n  },\n  activeNavItem: {\n    backgroundColor: '#EEF2FF',\n  },\n  navText: {\n    fontSize: 12,\n    color: '#64748B',\n    marginTop: 6,\n    fontWeight: '600',\n  },\n  activeNavText: {\n    color: '#6366F1',\n    fontWeight: '700',\n  },\n  productCategory: {\n    fontSize: 10,\n    color: '#666',\n    fontWeight: '500',\n  },\n});","size_bytes":11093},"app/home.tsx":{"content":"import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useNavigation } from '@react-navigation/native';\nimport * as Location from 'expo-location';\nimport { router } from 'expo-router';\nimport { addDoc, collection, deleteDoc, doc, documentId, getDoc, getDocs, increment, limit, query, setDoc, updateDoc, where, writeBatch } from 'firebase/firestore';\nimport React, { useEffect, useState } from 'react';\nimport { httpsCallable } from 'firebase/functions';\nimport {\n  ActivityIndicator,\n  Dimensions,\n  FlatList,\n  Image,\n  Modal,\n  Platform,\n  RefreshControl,\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View\n} from 'react-native';\nimport Toast from 'react-native-toast-message';\nimport { auth, db, firestoreDoc } from '../firebaseConfig';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nconst { width, height } = Dimensions.get('window');\n\n// Interface definitions\ninterface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  imageUrl: string;\n  images?: string[];\n  category: string;\n  rating?: number;\n  reviewCount?: number;\n  shopId?: string;\n  shopName?: string;\n  tags?: string[];\n  specifications?: Record<string, string>;\n  trending?: boolean;\n  discount?: number;\n  originalPrice?: number;\n  availableCities?: string[];\n}\n\ninterface CartItem {\n  productId: string;\n  quantity: number;\n  price: number;\n  name: string;\n  image: string;\n  product?: Product;\n}\n\ninterface WishlistItem {\n  id: string;\n  productId: string;\n}\n\n// Manual category list\nconst categories = [\n  { id: 'fruits', name: 'Fruits', icon: '🍎', image: 'https://images.unsplash.com/photo-1610832958506-aa56368176cf?auto=format&fit=crop&q=80&w=1740&ixlib=rb-4.0.3' },\n  { id: 'vegetables', name: 'Vegetables', icon: '🥦', image: 'https://images.unsplash.com/photo-1566385101042-1a0aa0c1268c?auto=format&fit=crop&q=80&w=1932&ixlib=rb-4.0.3' },\n  { id: 'dairy', name: 'Dairy', icon: '🥛', image: 'https://images.unsplash.com/photo-1550583724-b2692b85b150?auto=format&fit=crop&q=80&w=1887&ixlib=rb-4.0.3' },\n  { id: 'bakery', name: 'Bakery', icon: '🍞', image: 'https://images.unsplash.com/photo-1608198093002-ad4e005484ec?auto=format&fit=crop&q=80&w=1932&ixlib=rb-4.0.3' },\n  { id: 'meat', name: 'Meat', icon: '🥩', image: 'https://images.unsplash.com/photo-1607623814075-e51df1bdc82f?auto=format&fit=crop&q=80&w=1740&ixlib=rb-4.0.3' },\n  { id: 'snacks', name: 'Snacks', icon: '🍿', image: 'https://images.unsplash.com/photo-1599629954294-14df9f8291bc?auto=format&fit=crop&q=80&w=1964&ixlib=rb-4.0.3' }\n];\n\n\nexport default function Home() {\n  const navigation = useNavigation();\n  const [trendingProducts, setTrendingProducts] = useState<Product[]>([]);\n  const [allProducts, setAllProducts] = useState<Product[]>([]);\n  const [orderNotes, setOrderNotes] = useState('');\n  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [timeSlots, setTimeSlots] = useState<string[]>([]);\n  const [selectedSlot, setSelectedSlot] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchFocused, setSearchFocused] = useState(false);\n  const [searchHistory, setSearchHistory] = useState<string[]>([]);\n  const [userAddress, setUserAddress] = useState({\n    formatted: '',\n    street: '',\n    city: '',\n    state: '',\n    pincode: '',\n  });\n  const [isEditingAddress, setIsEditingAddress] = useState(false);\n  const [useCurrentLocation, setUseCurrentLocation] = useState(true);\n  const [userName, setUserName] = useState('');\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [wishlistItems, setWishlistItems] = useState<WishlistItem[]>([]);\n  const [recentlyViewed, setRecentlyViewed] = useState<Product[]>([]);\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\n  const [popularSearches, setPopularSearches] = useState<string[]>([\n    'Milk', 'Bread', 'Eggs', 'Bananas', 'Rice', 'Chicken'\n  ]);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('cash'); // Default to cash on delivery\n  const [cardDetails, setCardDetails] = useState({\n    number: '',\n    expiry: '',\n    cvc: '',\n    name: '',\n    last4: '',\n    brand: ''\n  });\n\n  const [activeOrders, setActiveOrders] = useState<any[]>([]);\n\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [isSearchModalOpen, setIsSearchModalOpen] = useState(false);\nuseEffect(() => {\n    // Check authentication state\n    const unsubscribe = auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        setUserLoggedIn(true);\n        await fetchUserData(user.uid);\n        await fetchCartItems(user.uid);\n        await fetchWishlistItems(user.uid);\n        await loadSearchHistory(user.uid);\n        await fetchActiveOrders(user.uid);\n      } else {\n        setUserLoggedIn(false);\n        setUserName('');\n        setCartItems([]);\n        setWishlistItems([]);\n        setSearchHistory([]);\n        setActiveOrders([]);\n      }\n    });\n\n    // Fetch all products\n    fetchProducts();\n    \n    // Generate delivery time slots\n    generateTimeSlots();\n    \n    // Load recently viewed from AsyncStorage\n    loadRecentlyViewed();\n\n    // Request location permissions\n    requestLocationPermission();\n\n    return () => unsubscribe();\n  }, []);\n\n  const requestLocationPermission = async () => {\n    try {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      if (status === 'granted') {\n        getCurrentLocation();\n      }\n    } catch (error) {\n      console.error(\"Error requesting location permission:\", error);\n    }\n  };\n\n  const loadRecentlyViewed = async () => {\n    try {\n      const storedItems = await AsyncStorage.getItem('recentlyViewed');\n      if (storedItems) {\n        setRecentlyViewed(JSON.parse(storedItems));\n      }\n    } catch (error) {\n      console.error(\"Error loading recently viewed items:\", error);\n    }\n  };\n\n  const fetchUserData = async (userId) => {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (userDoc.exists()) {\n        const userData = userDoc.data();\n        setUserName(userData.displayName || userData.firstName || '');\n        \n        if (userData.address) {\n          setUserAddress(userData.address);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching user data:\", error);\n    }\n  };\n\n const fetchActiveOrders = async (userId, setActiveOrders) => {\n  try {\n    const ordersRef = collection(db, 'users', userId, 'orders');\n    const q = query(ordersRef, where('status', 'in', [\n      'pending', 'confirmed', 'preparing', 'out_for_delivery'\n    ]));\n    \n    const querySnapshot = await getDocs(q);\n    const orders = [];\n\n    for (const orderDoc of querySnapshot.docs) {\n      const orderData = orderDoc.data();\n      let shopName = 'Unknown Shop';\n\n      if (orderData.shopId) {\n        try {\n          const shopRef = firestoreDoc(db, 'shops', orderData.shopId);\n          const shopSnap = await getDoc(shopRef);\n          if (shopSnap.exists()) {\n            shopName = shopSnap.data().name;\n          }\n        } catch (error) {\n          console.error(\"Error fetching shop details:\", error);\n        }\n      }\n\n      orders.push({\n        id: orderDoc.id,\n        ...orderData,\n        shopName\n      });\n    }\n\n    setActiveOrders(orders);\n  } catch (error) {\n    console.error(\"Error fetching active orders:\", error);\n  }\n};\n\n  const loadSearchHistory = async (userId) => {\n    try {\n      const searchHistoryRef = collection(db, 'users', userId, 'searchHistory');\n      const searchHistorySnapshot = await getDocs(query(searchHistoryRef, limit(5)));\n      \n      const searches = searchHistorySnapshot.docs.map(doc => doc.data().query);\n      setSearchHistory(searches);\n    } catch (error) {\n      console.error(\"Error loading search history:\", error);\n    }\n  };\n\n  const saveSearchToHistory = async (searchTerm) => {\n    if (!auth.currentUser || !searchTerm.trim()) return;\n    \n    try {\n      const userId = auth.currentUser.uid;\n      const searchHistoryRef = collection(db, 'users', userId, 'searchHistory');\n      \n      // Check if search term already exists\n      const existingQuery = query(searchHistoryRef, where('query', '==', searchTerm.trim()));\n      const existingDocs = await getDocs(existingQuery);\n      \n      if (existingDocs.empty) {\n        // Add new search term\n        await addDoc(searchHistoryRef, {\n          query: searchTerm.trim(),\n          timestamp: new Date()\n        });\n      } else {\n        // Update timestamp of existing search\n        const docId = existingDocs.docs[0].id;\n        await updateDoc(doc(searchHistoryRef, docId), {\n          timestamp: new Date()\n        });\n      }\n      \n      // Refresh search history\n      loadSearchHistory(userId);\n    } catch (error) {\n      console.error(\"Error saving search history:\", error);\n    }\n  };\n\n  const fetchWishlistItems = async (userId) => {\n    try {\n      const wishlistRef = collection(db, 'users', userId, 'wishlist');\n      const wishlistSnapshot = await getDocs(wishlistRef);\n      \n      const wishlistData = [];\n      for (const wishlistDoc of wishlistSnapshot.docs) {\n        wishlistData.push({\n          id: wishlistDoc.id,\n          productId: wishlistDoc.data().productId\n        });\n      }\n      \n      setWishlistItems(wishlistData);\n    } catch (error) {\n      console.error(\"Error fetching wishlist items:\", error);\n    }\n  };\n\n  const fetchProducts = async (categoryId = null) => {\n    try {\n      setLoading(true);\n      let productsQuery;\n      \n      if (categoryId) {\n        setSelectedCategory(categoryId);\n        productsQuery = query(\n          collection(db, 'products'), \n          where('category', '==', categoryId)\n        );\n      } else {\n        setSelectedCategory(null);\n        productsQuery = collection(db, 'products');\n      }\n      \n      const querySnapshot = await getDocs(productsQuery);\n      const products = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      \n      setAllProducts(products);\n      \n      // Get trending products - products with high ratings or special trending flag\n      const trending = products\n        .filter(p => p.trending || (p.rating && p.rating >= 4.5))\n        .slice(0, 8);\n      \n      setTrendingProducts(trending.length ? trending : products.slice(0, 8));\n      setFilteredProducts(products);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      setLoading(false);\n    }\n  };\n\n  // Improved search functionality\n  useEffect(() => {\n    if (!allProducts || allProducts.length === 0) return;\n    \n    let results = [...allProducts];\n    \n    if (searchQuery) {\n      const query = searchQuery.toLowerCase().trim();\n      results = allProducts.filter(product => \n        (product.name && product.name.toLowerCase().includes(query)) ||\n        (product.description && product.description.toLowerCase().includes(query)) ||\n        (product.category && product.category.toLowerCase().includes(query)) ||\n        (product.tags && Array.isArray(product.tags) && product.tags.some(tag => tag.toLowerCase().includes(query)))\n      );\n    }\n    \n    if (selectedCategory) {\n      results = results.filter(product => product.category === selectedCategory);\n    }\n    \n    if (useCurrentLocation && userAddress.city) {\n      results = results.filter(product => \n        !product.availableCities || \n        (Array.isArray(product.availableCities) && product.availableCities.includes(userAddress.city))\n      );\n    }\n    \n    setFilteredProducts(results);\n  }, [searchQuery, useCurrentLocation, allProducts, userAddress.city, selectedCategory]);\n\n  const handleSearch = () => {\n    if (searchQuery.trim()) {\n      saveSearchToHistory(searchQuery);\n      setIsSearchModalOpen(false);\n    }\n  };\n\n  const selectSearchTerm = (term) => {\n    setSearchQuery(term);\n    setSearchFocused(false);\n    setIsSearchModalOpen(false);\n    if (term.trim()) {\n      saveSearchToHistory(term);\n    }\n  };\n\n  const clearSearch = () => {\n    setSearchQuery('');\n  };\n\n  const generateTimeSlots = () => {\n    const slots = [];\n    const now = new Date();\n    let hour = now.getHours();\n    \n    if (now.getMinutes() > 45) hour += 1;\n    \n    for (let i = 0; i < 12; i++) {\n      const slotHour = (hour + i) % 24;\n      slots.push(`${slotHour}:00 - ${slotHour}:15`);\n      slots.push(`${slotHour}:15 - ${slotHour}:30`);\n      slots.push(`${slotHour}:30 - ${slotHour}:45`);\n      slots.push(`${slotHour}:45 - ${(slotHour + 1) % 24}:00`);\n    }\n    \n    setTimeSlots(slots);\n    setSelectedSlot(slots[0]);\n  };\n\n  const handleAddressChange = (name, value) => {\n    setUserAddress(prev => ({\n      ...prev,\n      [name]: value,\n      formatted: name === 'formatted' ? value : `${prev.street || ''}, ${prev.city || ''}, ${prev.state || ''}, ${prev.pincode || ''}`.replace(/^,\\s*|,\\s*$/g, '').replace(/,\\s*,/g, ',')\n    }));\n  };\n\n  const saveAddress = async () => {\n    if (auth.currentUser) {\n      try {\n        const userRef = doc(db, 'users', auth.currentUser.uid);\n        await updateDoc(userRef, {\n          address: userAddress\n        });\n        setIsEditingAddress(false);\n        Toast.show({\n          type: 'success',\n          text1: 'Address saved successfully!'\n        });\n      } catch (error) {\n        console.error(\"Error updating address:\", error);\n        Toast.show({\n          type: 'error',\n          text1: 'Failed to save address'\n        });\n      }\n    } else {\n      Toast.show({\n        type: 'info',\n        text1: 'Please login to save your address'\n      });\n      navigation.navigate('Login');\n    }\n  };\n\n  const getCurrentLocation = async () => {\n    try {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        Toast.show({\n          type: 'error',\n          text1: 'Location permission denied'\n        });\n        return;\n      }\n\n      const location = await Location.getCurrentPositionAsync({});\n      \n      try {\n        const response = await fetch(\n          `https://nominatim.openstreetmap.org/reverse?format=json&lat=${location.coords.latitude}&lon=${location.coords.longitude}`\n        );\n        const data = await response.json();\n        \n        if (data.address) {\n          const newAddress = {\n            formatted: data.display_name,\n            street: `${data.address.road || ''} ${data.address.house_number || ''}`.trim(),\n            city: data.address.city || data.address.town || data.address.village || '',\n            state: data.address.state || '',\n            pincode: data.address.postcode || '',\n          };\n          \n          setUserAddress(newAddress);\n          \n          if (auth.currentUser) {\n            const userRef = doc(db, 'users', auth.currentUser.uid);\n            await updateDoc(userRef, { address: newAddress });\n            Toast.show({\n              type: 'success',\n              text1: 'Location updated successfully'\n            });\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching location data:\", error);\n        Toast.show({\n          type: 'error',\n          text1: 'Failed to get your location'\n        });\n      }\n    } catch (error) {\n      console.error(\"Geolocation error:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Could not access your location'\n      });\n    }\n  };\n\n  const toggleLocationMode = () => {\n    setUseCurrentLocation(prev => !prev);\n    if (!useCurrentLocation) {\n      getCurrentLocation();\n    }\n  };\n\n  // Improved cart fetching with error handling\n  const fetchCartItems = async (userId) => {\n    try {\n      const cartRef = doc(db, \"carts\", userId);\n      const cartSnap = await getDoc(cartRef);\n      \n      if (!cartSnap.exists()) {\n        // Initialize cart if it doesn't exist\n        await setDoc(cartRef, {\n          items: [],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          total: 0\n        });\n        setCartItems([]);\n        return [];\n      }\n\n      const cartData = cartSnap.data();\n      const items = cartData.items || [];\n      \n      // Filter out any invalid items\n      const validItems = items.filter(item => \n        item && item.productId && typeof item.quantity === 'number'\n      );\n\n      if (validItems.length === 0) {\n        setCartItems([]);\n        return [];\n      }\n\n      const productIds = validItems.map(item => item.productId);\n      \n      // Fetch product data in batches of 10 (Firestore limit for 'in' queries)\n      const mergedItems = [];\n      \n      for (let i = 0; i < productIds.length; i += 10) {\n        const batchIds = productIds.slice(i, i + 10);\n        \n        if (batchIds.length > 0) {\n          const productsQuery = query(\n            collection(db, \"products\"),\n            where(documentId(), \"in\", batchIds)\n          );\n          \n          const productsSnap = await getDocs(productsQuery);\n          const productsMap = {};\n          \n          productsSnap.forEach(doc => {\n            productsMap[doc.id] = {\n              id: doc.id,\n              ...doc.data()\n            };\n          });\n          \n          // Process this batch of items\n          validItems\n            .filter(item => batchIds.includes(item.productId))\n            .forEach(item => {\n              mergedItems.push({\n                ...item,\n                product: productsMap[item.productId] || {\n                  id: item.productId,\n                  name: \"Product not found\",\n                  price: 0,\n                  imageUrl: \"/placeholder.jpg\"\n                }\n              });\n            });\n        }\n      }\n      \n      setCartItems(mergedItems);\n      return mergedItems;\n      \n    } catch (error) {\n      console.error(\"Error fetching cart items:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Failed to load cart items'\n      });\n      setCartItems([]);\n      return [];\n    }\n  };\n\n  // Add to cart with validation\n  const handleAddToCart = async (product) => {\n    try {\n      if (!product || !product.id) {\n        Toast.show({\n          type: 'error',\n          text1: 'Invalid product'\n        });\n        return false;\n      }\n\n      if (!auth.currentUser) {\n        Toast.show({\n          type: 'info',\n          text1: 'Please log in to add items to cart'\n        });\n        navigation.navigate('Login');\n        return false;\n      }\n\n      const userId = auth.currentUser.uid;\n      const cartRef = doc(db, \"carts\", userId);\n      const cartSnap = await getDoc(cartRef);\n      \n      let items = [];\n      if (cartSnap.exists()) {\n        items = [...(cartSnap.data().items || [])];\n      } else {\n        // Initialize cart if it doesn't exist\n        await setDoc(cartRef, {\n          items: [],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          total: 0\n        });\n      }\n\n      // Validate product data\n      const safeProduct = {\n        productId: product.id,\n        quantity: 1,\n        price: Number(product.price) || 0,\n        name: String(product.name) || \"Unnamed Product\",\n        image: product.imageUrl || \"\"\n      };\n\n      const existingIndex = items.findIndex(item => \n        item && item.productId === product.id\n      );\n\n      if (existingIndex >= 0) {\n        items[existingIndex].quantity += 1;\n        Toast.show({\n          type: 'success',\n          text1: `Added another ${product.name} to cart`\n        });\n      } else {\n        items.push(safeProduct);\n        Toast.show({\n          type: 'success',\n          text1: `${product.name} added to cart`\n        });\n      }\n\n      // Calculate total\n      const total = items.reduce((sum, item) => {\n        return sum + ((item.price || 0) * (item.quantity || 0));\n      }, 0);\n\n      await updateDoc(cartRef, {\n        items: items.filter(item => item), // Remove any null/undefined\n        updatedAt: new Date(),\n        total: total\n      });\n\n      // Refresh cart items\n      await fetchCartItems(userId);\n      return true;\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Failed to add item to cart'\n      });\n      return false;\n    }\n  };\n\n  // Handle quantity change with validation\n  const handleQuantityChange = async (productId, change) => {\n    if (!auth.currentUser) {\n      Toast.show({\n        type: 'info',\n        text1: 'Please log in to update your cart'\n      });\n      navigation.navigate('Login');\n      return;\n    }\n    \n    try {\n      const userId = auth.currentUser.uid;\n      const cartRef = doc(db, 'carts', userId);\n      const cartSnap = await getDoc(cartRef);\n      \n      if (!cartSnap.exists()) {\n        await setDoc(cartRef, {\n          items: [],\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          total: 0\n        });\n        return;\n      }\n      \n      const cartData = cartSnap.data();\n      const items = [...(cartData.items || [])];\n      const itemIndex = items.findIndex(item => \n        item && item.productId === productId\n      );\n      \n      if (itemIndex === -1) return;\n      \n      const updatedItems = [...items];\n      const currentItem = updatedItems[itemIndex];\n      const newQuantity = (currentItem.quantity || 0) + change;\n      \n      if (newQuantity <= 0) {\n        updatedItems.splice(itemIndex, 1);\n        Toast.show({\n          type: 'info',\n          text1: `Removed ${currentItem.name || 'item'} from cart`\n        });\n      } else {\n        updatedItems[itemIndex] = {\n          ...currentItem,\n          quantity: newQuantity\n        };\n      }\n      \n      // Calculate new total\n      const total = updatedItems.reduce((sum, item) => {\n        return sum + ((item.price || 0) * (item.quantity || 0));\n      }, 0);\n      \n      await updateDoc(cartRef, {\n        items: updatedItems.filter(item => item), // Ensure no undefined\n        updatedAt: new Date(),\n        total: total\n      });\n      \n      // Refresh cart items\n      await fetchCartItems(userId);\n      \n    } catch (error) {\n      console.error(\"Error updating quantity:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Failed to update quantity'\n      });\n    }\n  };\n\n  // Remove item from cart\n  const removeFromCart = async (productId) => {\n    if (!auth.currentUser) {\n      Toast.show({\n        type: 'info',\n        text1: 'Please log in to update your cart'\n      });\n      navigation.navigate('Login');\n      return;\n    }\n    \n    try {\n      const userId = auth.currentUser.uid;\n      const cartRef = doc(db, 'carts', userId);\n      const cartSnap = await getDoc(cartRef);\n      \n      if (!cartSnap.exists()) return;\n      \n      const cartData = cartSnap.data();\n      const items = [...(cartData.items || [])];\n      \n      // Find item name before removal for toast\n      const itemToRemove = items.find(item => item.productId === productId);\n      const itemName = itemToRemove ? itemToRemove.name : 'Item';\n      \n      const updatedItems = items.filter(item => item.productId !== productId);\n      \n      // Calculate new total\n      const total = updatedItems.reduce((sum, item) => {\n        return sum + ((item.price || 0) * (item.quantity || 0));\n      }, 0);\n      \n      await updateDoc(cartRef, {\n        items: updatedItems,\n        updatedAt: new Date(),\n        total: total\n      });\n      \n      Toast.show({\n        type: 'success',\n        text1: `${itemName} removed from cart`\n      });\n      \n      // Refresh cart items\n      await fetchCartItems(userId);\n      \n    } catch (error) {\n      console.error(\"Error removing item from cart:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Failed to remove item from cart'\n      });\n    }\n  };\n\n  const toggleAddToWishlist = async (productId) => {\n    if (!userLoggedIn) {\n      Toast.show({\n        type: 'info',\n        text1: 'Please log in to add to wishlist'\n      });\n      navigation.navigate('Login');\n      return;\n    }\n    \n    try {\n      const userId = auth.currentUser.uid;\n      const isInWishlist = wishlistItems.some(item => item.productId === productId);\n      \n      if (isInWishlist) {\n        // Remove from wishlist\n        const wishlistItemId = wishlistItems.find(item => item.productId === productId).id;\n        await deleteDoc(doc(db, 'users', userId, 'wishlist', wishlistItemId));\n        Toast.show({\n          type: 'success',\n          text1: 'Removed from wishlist'\n        });\n      } else {\n        // Add to wishlist\n        await addDoc(collection(db, 'users', userId, 'wishlist'), {\n          productId: productId,\n          addedAt: new Date()\n        });\n        Toast.show({\n          type: 'success',\n          text1: 'Added to wishlist'\n        });\n      }\n      \n      // Refresh wishlist\n      fetchWishlistItems(userId);\n    } catch (error) {\n      console.error(\"Error updating wishlist:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Failed to update wishlist'\n      });\n    }\n  };\n\n  const handleProductClick = (product) => {\n    if (!product || !product.id) return;\n    \n    try {\n      const viewed = [...recentlyViewed];\n      const existingIndex = viewed.findIndex(item => item && item.id === product.id);\n      \n      if (existingIndex !== -1) {\n        viewed.splice(existingIndex, 1);\n      }\n      \n      viewed.unshift(product);\n      \n      const newRecentlyViewed = viewed.slice(0, 5);\n      setRecentlyViewed(newRecentlyViewed);\n      AsyncStorage.setItem('recentlyViewed', JSON.stringify(newRecentlyViewed));\n    } catch (error) {\n      console.error(\"Error updating recently viewed:\", error);\n    }\n  };\n\n  const getTotalCartItems = () => {\n    return cartItems.reduce((total, item) => total + (item.quantity || 0), 0);\n  };\n\n  const getTotalCartPrice = () => {\n    return cartItems.reduce((total, item) => {\n      return total + ((item.product?.price || 0) * (item.quantity || 0));\n    }, 0);\n  };\n\nconst handleCheckout = async () => {\n  // Validate cart and address first\n  if (cartItems.length === 0) {\n    Toast.show({\n      type: 'warning',\n      text1: 'Your cart is empty'\n    });\n    return;\n  }\n  \n  if (!userAddress.formatted) {\n    Toast.show({\n      type: 'warning',\n      text1: 'Please set your delivery address first'\n    });\n    setIsEditingAddress(true);\n    return;\n  }\n\n  // Validate payment method details\n  if (selectedPaymentMethod === 'card') {\n    if (!cardDetails.number || !cardDetails.expiry || !cardDetails.cvc || !cardDetails.name) {\n      Toast.show({\n        type: 'warning',\n        text1: 'Please enter your complete card details'\n      });\n      return;\n    }\n    \n    // Process card details\n    cardDetails.last4 = cardDetails.number.slice(-4);\n    // Determine card brand based on first digit\n    const firstDigit = cardDetails.number.charAt(0);\n    if (firstDigit === '4') cardDetails.brand = 'Visa';\n    else if (firstDigit === '5') cardDetails.brand = 'Mastercard';\n    else if (firstDigit === '3') cardDetails.brand = 'Amex';\n    else cardDetails.brand = 'Other';\n  }\n  \n  if (!selectedSlot) {\n    Toast.show({\n      type: 'warning',\n      text1: 'Please select a delivery time slot'\n    });\n    return;\n  }\n  \n  try {\n    // Check if user is logged in\n    if (!auth.currentUser) {\n      Toast.show({\n        type: 'info',\n        text1: 'Please log in to checkout'\n      });\n      navigation.navigate('Login');\n      return;\n    }\n    \n    const userId = auth.currentUser.uid;\n    const batch = writeBatch(db);\n    \n    // Group cart items by shopId\n    const itemsByShop = {};\n    cartItems.forEach(item => {\n      const shopId = item.product?.shopId || 'default';\n      if (!itemsByShop[shopId]) {\n        itemsByShop[shopId] = [];\n      }\n      itemsByShop[shopId].push({\n        productId: item.productId,\n        name: item.product?.name || 'Unknown Product',\n        quantity: item.quantity,\n        price: item.product?.price || 0,\n        imageUrl: item.product?.imageUrl,\n        shopId: item.product?.shopId\n      });\n    });\n\n    // Create orders for each shop\n    const orderIds = [];\n    const shopOrders = [];\n\n    for (const shopId in itemsByShop) {\n      const shopItems = itemsByShop[shopId];\n      \n      // Calculate shop-specific totals\n      const shopSubtotal = shopItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n      const deliveryFee = 20; // Example delivery fee\n      const tax = shopSubtotal * 0.08; // Example tax rate\n      const shopTotal = shopSubtotal + deliveryFee + tax;\n      \n      // Get shop details\n      let shopData = { name: 'Unknown Shop' };\n      try {\n        const shopRef = doc(db, 'shops', shopId);\n        const shopSnap = await getDoc(shopRef);\n        if (shopSnap.exists()) {\n          shopData = shopSnap.data();\n        }\n      } catch (error) {\n        console.error(`Error fetching shop ${shopId} details:`, error);\n      }\n      \n      // Create an order reference\n      const orderRef = doc(collection(db, 'orders'));\n      const orderId = orderRef.id;\n      orderIds.push(orderId);\n      \n      const orderData = {\n        orderId,\n        userId,\n        userEmail: auth.currentUser.email,\n        userName: auth.currentUser.displayName || 'Customer',\n        shopId,\n        shopName: shopData.name,\n        items: shopItems,\n        subtotal: shopSubtotal,\n        deliveryFee,\n        tax,\n        total: shopTotal,\n        status: 'pending',\n        address: userAddress,\n        deliverySlot: selectedSlot,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        paymentMethod: selectedPaymentMethod,\n        paymentStatus: selectedPaymentMethod === 'cash' ? 'pending' : 'paid',\n        notes: orderNotes\n      };\n\n      // Process payment if using card\n      if (selectedPaymentMethod === 'card') {\n        // Here you would integrate with your payment processor\n        // For this example, we're just storing minimal payment info\n        orderData.paymentStatus = 'paid';\n        orderData.paymentDetails = {\n          last4: cardDetails.last4,\n          brand: cardDetails.brand\n        };\n      }\n\n      // Add to main orders collection\n      batch.set(orderRef, orderData);\n\n      // Add to user's orders subcollection\n      const userOrderRef = doc(collection(db, 'users', userId, 'orders'), orderId);\n      batch.set(userOrderRef, orderData);\n      \n      // Add to shop's orders subcollection (if needed)\n      const shopOrderRef = doc(collection(db, 'shops', shopId, 'orders'), orderId);\n      batch.set(shopOrderRef, orderData);\n\n      shopOrders.push({\n        id: orderId,\n        ...orderData\n      });\n      \n      // Update product stock and popularity\n      for (const item of shopItems) {\n        if (item.productId) {\n          const productRef = doc(db, 'products', item.productId);\n          batch.update(productRef, {\n            stock: increment(-item.quantity),\n            purchaseCount: increment(item.quantity),\n            updatedAt: new Date()\n          });\n        }\n      }\n    }\n\n    // Clear the user's cart\n    const cartRef = doc(db, 'carts', userId);\n    batch.set(cartRef, {\n      items: [],\n      updatedAt: new Date(),\n      total: 0\n    });\n\n    // Commit all database operations\n    await batch.commit();\n    \n    // Update local states\n    setCartItems([]);\n    setActiveOrders(prev => [...shopOrders, ...prev]);\n    setIsCartOpen(false);\n    \n    // Show success message\n    Toast.show({\n      type: 'success',\n      text1: 'Order placed successfully!',\n      text2: orderIds.length > 1 \n        ? `${orderIds.length} orders created` \n        : `Order #${orderIds[0].slice(0, 8)}`\n    });\n    \n    // Navigate to Orders screen\n    navigation.navigate('Orders', { \n      newOrderIds: orderIds,\n      screen: 'ActiveOrders'\n    });\n    \n  } catch (error) {\n    console.error(\"Error placing order:\", error);\n    Toast.show({\n      type: 'error',\n      text1: 'Failed to place your order',\n      text2: error.message || 'Please try again later'\n    });\n  }\n};\n\n  // Render the cart modal\n const renderCartModal = () => {\n    return (\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={isCartOpen}\n        onRequestClose={() => setIsCartOpen(false)}\n      >\n        <SafeAreaView style={styles.cartModalContainer}>\n          <View style={styles.cartHeader}>\n            <TouchableOpacity onPress={() => setIsCartOpen(false)}>\n              <Ionicons name=\"arrow-back\" size={24} color=\"#000\" />\n            </TouchableOpacity>\n            <Text style={styles.cartTitle}>Your Cart ({getTotalCartItems()})</Text>\n            <TouchableOpacity onPress={() => removeAllFromCart()}>\n              <Text style={styles.clearCartText}>Clear</Text>\n            </TouchableOpacity>\n          </View>\n          \n          {cartItems.length === 0 ? (\n            <View style={styles.emptyCartContainer}>\n             \n              <Text style={styles.emptyCartText}>Your cart is empty</Text>\n              <TouchableOpacity \n                style={styles.startShoppingButton}\n                onPress={() => setIsCartOpen(false)}\n              >\n                <Text style={styles.startShoppingButtonText}>Start Shopping</Text>\n              </TouchableOpacity>\n            </View>\n          ) : (\n            <View style={styles.cartContent}>\n              <ScrollView style={styles.cartItemsContainer}>\n                {cartItems.map((item) => (\n                  <View key={item.productId} style={styles.cartItem}>\n                    <Image \n                      source={{ uri: item.product?.imageUrl || 'https://via.placeholder.com/100' }}\n                      style={styles.cartItemImage}\n                    />\n                    <View style={styles.cartItemDetails}>\n                      <Text style={styles.cartItemName} numberOfLines={1}>\n                        {item.product?.name || 'Product'}\n                      </Text>\n                      <Text style={styles.cartItemPrice}>\n                        ₹{item.product?.price || 0}\n                      </Text>\n                    </View>\n                    <View style={styles.quantityControl}>\n                      <TouchableOpacity \n                        style={styles.quantityButton}\n                        onPress={() => handleQuantityChange(item.productId, -1)}\n                      >\n                        <Text style={styles.quantityButtonText}>-</Text>\n                      </TouchableOpacity>\n                      <Text style={styles.quantityText}>{item.quantity}</Text>\n                      <TouchableOpacity \n                        style={styles.quantityButton}\n                        onPress={() => handleQuantityChange(item.productId, 1)}\n                      >\n                        <Text style={styles.quantityButtonText}>+</Text>\n                      </TouchableOpacity>\n                    </View>\n                  </View>\n                ))}\n                \n                <View style={styles.orderNotesContainer}>\n                  <Text style={styles.orderNotesLabel}>Add Notes:</Text>\n                  <TextInput \n                    style={styles.orderNotesInput}\n                    placeholder=\"Special instructions for your order\"\n                    value={orderNotes}\n                    onChangeText={setOrderNotes}\n                    multiline\n                  />\n                </View>\n                \n                <View style={styles.deliveryTimeContainer}>\n                  <Text style={styles.deliveryTimeLabel}>Select Delivery Time:</Text>\n                  <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n                    {timeSlots.map((slot, index) => (\n                      <TouchableOpacity \n                        key={index}\n                        style={[\n                          styles.timeSlotButton,\n                          selectedSlot === slot && styles.selectedTimeSlotButton\n                        ]}\n                        onPress={() => setSelectedSlot(slot)}\n                      >\n                        <Text style={[\n                          styles.timeSlotText,\n                          selectedSlot === slot && styles.selectedTimeSlotText\n                        ]}>\n                          {slot}\n                        </Text>\n                      </TouchableOpacity>\n                    ))}\n                  </ScrollView>\n                </View>\n                \n                <View style={styles.paymentMethodContainer}>\n                  <Text style={styles.paymentMethodLabel}>Payment Method:</Text>\n                  <View style={styles.paymentOptions}>\n                    <TouchableOpacity \n                      style={[\n                        styles.paymentOption,\n                        selectedPaymentMethod === 'cash' && styles.selectedPaymentOption\n                      ]}\n                      onPress={() => setSelectedPaymentMethod('cash')}\n                    >\n                      <MaterialCommunityIcons name=\"cash\" size={24} color={selectedPaymentMethod === 'cash' ? \"#4CAF50\" : \"#777\"} />\n                      <Text style={styles.paymentOptionText}>Cash on Delivery</Text>\n                    </TouchableOpacity>\n                    \n                    <TouchableOpacity \n                      style={[\n                        styles.paymentOption,\n                        selectedPaymentMethod === 'card' && styles.selectedPaymentOption\n                      ]}\n                      onPress={() => setSelectedPaymentMethod('card')}\n                    >\n                      <MaterialCommunityIcons name=\"credit-card\" size={24} color={selectedPaymentMethod === 'card' ? \"#4CAF50\" : \"#777\"} />\n                      <Text style={styles.paymentOptionText}>Credit/Debit Card</Text>\n                    </TouchableOpacity>\n                  </View>\n                  \n                  {selectedPaymentMethod === 'card' && (\n                    <View style={styles.cardDetailsContainer}>\n                      <TextInput \n                        style={styles.cardInput}\n                        placeholder=\"Card Number\"\n                        value={cardDetails.number}\n                        onChangeText={(text) => setCardDetails({...cardDetails, number: text})}\n                        keyboardType=\"numeric\"\n                        maxLength={16}\n                      />\n                      <View style={styles.cardRowInputs}>\n                        <TextInput \n                          style={[styles.cardInput, styles.cardSmallInput]}\n                          placeholder=\"MM/YY\"\n                          value={cardDetails.expiry}\n                          onChangeText={(text) => setCardDetails({...cardDetails, expiry: text})}\n                          keyboardType=\"numeric\"\n                          maxLength={5}\n                        />\n                        <TextInput \n                          style={[styles.cardInput, styles.cardSmallInput]}\n                          placeholder=\"CVC\"\n                          value={cardDetails.cvc}\n                          onChangeText={(text) => setCardDetails({...cardDetails, cvc: text})}\n                          keyboardType=\"numeric\"\n                          maxLength={3}\n                        />\n                      </View>\n                      <TextInput \n                        style={styles.cardInput}\n                        placeholder=\"Name on Card\"\n                        value={cardDetails.name}\n                        onChangeText={(text) => setCardDetails({...cardDetails, name: text})}\n                      />\n                    </View>\n                  )}\n                </View>\n              </ScrollView>\n              \n              <View style={styles.cartSummary}>\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>Subtotal:</Text>\n                  <Text style={styles.summaryValue}>₹{getTotalCartPrice().toFixed(2)}</Text>\n                </View>\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>Delivery Fee:</Text>\n                  <Text style={styles.summaryValue}>₹20.00</Text>\n                </View>\n                <View style={styles.summaryRow}>\n                  <Text style={styles.summaryLabel}>Tax (8%):</Text>\n                  <Text style={styles.summaryValue}>₹{(getTotalCartPrice() * 0.08).toFixed(2)}</Text>\n                </View>\n                <View style={styles.totalRow}>\n                  <Text style={styles.totalLabel}>Total:</Text>\n                  <Text style={styles.totalValue}>\n                    ₹{(getTotalCartPrice() + 20 + (getTotalCartPrice() * 0.08)).toFixed(2)}\n                  </Text>\n                </View>\n                \n                <TouchableOpacity \n                  style={styles.checkoutButton}\n                  onPress={handleCheckout}\n                >\n                  <Text style={styles.checkoutButtonText}>Place Order</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          )}\n        </SafeAreaView>\n      </Modal>\n    );\n  };\n\n  const removeAllFromCart = async () => {\n    if (!auth.currentUser) return;\n    \n    try {\n      const userId = auth.currentUser.uid;\n      await setDoc(doc(db, 'carts', userId), {\n        items: [],\n        updatedAt: new Date(),\n        total: 0\n      });\n      \n      setCartItems([]);\n      Toast.show({\n        type: 'success',\n        text1: 'Cart cleared'\n      });\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Failed to clear cart'\n      });\n    }\n  };\n  \nconst { width, height } = Dimensions.get('window');\n\n  // Main render\n  return (\n    <SafeAreaProvider>\n    <SafeAreaView style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#fff\" />\n      \n      \n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.locationContainer}>\n          <Ionicons name=\"location-sharp\" size={20} color=\"#FF5722\" />\n          <TouchableOpacity onPress={() => setIsEditingAddress(true)}>\n            <Text style={styles.locationText} numberOfLines={1}>\n              {userAddress.formatted \n                ? userAddress.formatted.substring(0, 25) + (userAddress.formatted.length > 25 ? '...' : '') \n                : 'Set your location'}\n            </Text>\n            <Text style={styles.deliveryTimeText}>Delivery in 10-15 min</Text>\n          </TouchableOpacity>\n        </View>\n        \n        <View style={styles.headerActions}>\n        \n          \n          <TouchableOpacity \n            style={styles.cartButton}\n            onPress={() => setIsCartOpen(true)}\n          >\n            <Ionicons name=\"cart-outline\" size={24} color=\"#333\" />\n            {cartItems.length > 0 && (\n              <View style={styles.cartBadge}>\n                <Text style={styles.cartBadgeText}>{getTotalCartItems()}</Text>\n              </View>\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n      \n      {/* Search Bar */}\n      <TouchableOpacity\n        style={styles.searchBar}\n        onPress={() => setIsSearchModalOpen(true)}\n      >\n        <Ionicons name=\"search\" size={20} color=\"#777\" />\n        <Text style={styles.searchPlaceholder}>\n          Search for groceries, vegetables...\n        </Text>\n      </TouchableOpacity>\n      \n      {/* Main Content */}\n      <ScrollView\n        showsVerticalScrollIndicator={false}\n        refreshControl={\n          <RefreshControl\n            refreshing={loading}\n            onRefresh={() => fetchProducts()}\n            colors={[\"#FF5722\"]}\n          />\n        }\n      >\n        {/* Banners */}\n        <View style={styles.bannerContainer}>\n          <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n            <Image\n              source={{uri: 'https://images.unsplash.com/photo-1542838132-92c53300491e?q=80&w=1974'}}\n              style={styles.bannerImage}\n            />\n            <Image\n              source={{uri: 'https://images.unsplash.com/photo-1608686207856-001b95cf60ca?q=80&w=1927'}}\n              style={styles.bannerImage}\n            />\n            <Image\n              source={{uri: 'https://images.unsplash.com/photo-1595475207225-428b62bda831?q=80&w=1969'}}\n              style={styles.bannerImage}\n            />\n          </ScrollView>\n        </View>\n        \n        {/* Categories */}\n        <Text style={styles.sectionTitle}>Shop by Category</Text>\n        <ScrollView \n          horizontal \n          showsHorizontalScrollIndicator={false}\n          style={styles.categoriesContainer}\n        >\n          {categories.map((category) => (\n            <TouchableOpacity\n              key={category.id}\n              style={[\n                styles.categoryItem,\n                selectedCategory === category.id && styles.selectedCategoryItem\n              ]}\n              onPress={() => fetchProducts(category.id)}\n            >\n              <Image\n                source={{uri: category.image}}\n                style={styles.categoryImage}\n              />\n              <Text style={styles.categoryName}>{category.name}</Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n        \n        {/* Trending Products */}\n        {trendingProducts.length > 0 && (\n          <>\n            <View style={styles.sectionHeader}>\n              <Text style={styles.sectionTitle}>Trending Now</Text>\n              <TouchableOpacity onPress={() => router.push('/categories')}>\n                <Text style={styles.seeAllButton}>See All</Text>\n              </TouchableOpacity>\n            </View>\n            \n            <FlatList\n              horizontal\n              data={trendingProducts}\n              keyExtractor={(item) => item.id}\n              showsHorizontalScrollIndicator={false}\n              renderItem={({item}) => (\n                <TouchableOpacity \n                style={styles.productCard}\n  onPress={() => {\n    handleProductClick(item);\n    router.push(`/products/${item.id}`);\n  }}\n                >\n \n\n                  <View style={styles.productImageContainer}>\n                    <Image\n                      source={{uri: item.imageUrl || 'https://via.placeholder.com/150'}}\n                      style={styles.productImage}\n                    />\n                    <TouchableOpacity \n                      style={styles.wishlistButton}\n                      onPress={() => toggleAddToWishlist(item.id)}\n                    >\n                      <Ionicons \n                        name={wishlistItems.some(wishItem => wishItem.productId === item.id) ? \"heart\" : \"heart-outline\"} \n                        size={18} \n                        color={wishlistItems.some(wishItem => wishItem.productId === item.id) ? \"#FF5722\" : \"#777\"} \n                      />\n                    </TouchableOpacity>\n                  </View>\n                  \n                  <View style={styles.productInfo}>\n                    <Text style={styles.productPrice}>₹{item.price}</Text>\n                    <Text style={styles.productName} numberOfLines={1}>{item.name}</Text>\n                    <Text style={styles.productQuantity}>{item.quantity || '1 each'}</Text>\n                    \n                    <TouchableOpacity \n                      style={styles.addButton}\n                      onPress={() => handleAddToCart(item)}\n                    >\n                      <Text style={styles.addButtonText}>Add</Text>\n                    </TouchableOpacity>\n                  </View>\n                </TouchableOpacity>\n              )}\n            />\n          </>\n        )}\n        \n        {/* Active Orders */}\n        {activeOrders.length > 0 && (\n          <>\n            <View style={styles.activeOrdersContainer}>\n              <Text style={styles.sectionTitle}>Active Orders</Text>\n              <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n                {activeOrders.map((order) => (\n                  <TouchableOpacity \n                    key={order.id}\n                    style={styles.activeOrderCard}\n                    onPress={() => {\n  handleProductClick(order);\n    router.push('/orders'); // <- parentheses and proper path\n  }}\n                  >\n   \n                    <View style={styles.activeOrderHeader}>\n                      <Text style={styles.activeOrderId}>#{order.id.slice(0, 8)}</Text>\n                      <View style={styles.activeOrderStatusContainer}>\n                        <View \n                          style={[\n                            styles.activeOrderStatusDot,\n                            { backgroundColor: \n                              order.status === 'pending' ? '#FFC107' :\n                              order.status === 'confirmed' ? '#2196F3' :\n                              order.status === 'preparing' ? '#FF9800' :\n                              order.status === 'out_for_delivery' ? '#8BC34A' : '#4CAF50'\n                            }\n                          ]} \n                        />\n                        <Text style={styles.activeOrderStatusText}>\n                          {order.status === 'pending' ? 'Pending' :\n                           order.status === 'confirmed' ? 'Confirmed' :\n                           order.status === 'preparing' ? 'Preparing' :\n                           order.status === 'out_for_delivery' ? 'Out for Delivery' : 'Delivered'}\n                        </Text>\n                      </View>\n                    </View>\n                    \n                    <Text style={styles.activeOrderShop}>{order.shopName}</Text>\n                    <Text style={styles.activeOrderItems}>\n                      {order.items.length} item{order.items.length !== 1 ? 's' : ''}\n                    </Text>\n                    \n                    <Text style={styles.activeOrderTotal}>\n                      ₹{order.total?.toFixed(2) || '0.00'}\n                    </Text>\n                    \n                    <View style={styles.activeOrderFooter}>\n                      <Ionicons name=\"time-outline\" size={16} color=\"#666\" />\n                      <Text style={styles.activeOrderDelivery}>\n                        Delivery: {order.deliverySlot}\n                      </Text>\n                    </View>\n                  </TouchableOpacity>\n                ))}\n              </ScrollView>\n            </View>\n          </>\n        )}\n        \n        {/* All Products based on filter or search */}\n        <View style={styles.sectionHeader}>\n          <Text style={styles.sectionTitle}>\n            {searchQuery ? `Results for \"${searchQuery}\"` : selectedCategory ? \n            `${categories.find(c => c.id === selectedCategory)?.name || 'Products'}` : 'All Products'}\n          </Text>\n          {selectedCategory && (\n            <TouchableOpacity onPress={() => fetchProducts()}>\n              <Text style={styles.clearFilterButton}>Clear Filter</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n        \n        {loading ? (\n          <ActivityIndicator size=\"large\" color=\"#FF5722\" style={styles.loader} />\n        ) : filteredProducts.length > 0 ? (\n          <View style={styles.productsGrid}>\n            {filteredProducts.map((item) => (\n              <TouchableOpacity \n                key={item.id}\n            \n                style={styles.productCard}\n  onPress={() => {\n    handleProductClick(item);\n    router.push(`/products/${item.id}`);\n  }}\n                >\n              \n                <View style={styles.productImageContainer}>\n                  <Image\n                    source={{uri: item.imageUrl || 'https://via.placeholder.com/150'}}\n                    style={styles.productImage}\n                  />\n                  <TouchableOpacity \n                    style={styles.wishlistButton}\n                    onPress={() => toggleAddToWishlist(item.id)}\n                  >\n                    <Ionicons \n                      name={wishlistItems.some(wishItem => wishItem.productId === item.id) ? \"heart\" : \"heart-outline\"} \n                      size={18} \n                      color={wishlistItems.some(wishItem => wishItem.productId === item.id) ? \"#FF5722\" : \"#777\"} \n                    />\n                  </TouchableOpacity>\n                </View>\n                \n                <View style={styles.productInfo}>\n                  <Text style={styles.productPrice}>₹{item.price}</Text>\n                  <Text style={styles.productName} numberOfLines={1}>{item.name}</Text>\n                  <Text style={styles.productQuantity}>{item.quantity || '1 each'}</Text>\n                  \n                  <TouchableOpacity \n                    style={styles.addButton}\n                    onPress={() => handleAddToCart(item)}\n                  >\n                    <Text style={styles.addButtonText}>Add</Text>\n                  </TouchableOpacity>\n                </View>\n              </TouchableOpacity>\n            ))}\n          </View>\n        ) : (\n          <View style={styles.noResultsContainer}>\n            \n            <Text style={styles.noResultsText}>No products found</Text>\n            <TouchableOpacity onPress={() => {\n              setSearchQuery('');\n              setSelectedCategory(null);\n              fetchProducts();\n            }}>\n              <Text style={styles.resetSearchButton}>Reset Search</Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      </ScrollView>\n      \n      {/* Address Modal */}\n      <Modal\n        visible={isEditingAddress}\n        transparent={true}\n        animationType=\"slide\"\n        onRequestClose={() => setIsEditingAddress(false)}\n      >\n        <View style={styles.modalContainer}>\n          <View style={styles.modalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Delivery Address</Text>\n              <TouchableOpacity onPress={() => setIsEditingAddress(false)}>\n                <Ionicons name=\"close\" size={24} color=\"#000\" />\n              </TouchableOpacity>\n            </View>\n            \n            <View style={styles.locationToggle}>\n              <TouchableOpacity \n                style={[styles.locationToggleButton, useCurrentLocation && styles.activeLocationToggle]}\n                onPress={() => useCurrentLocation ? getCurrentLocation() : toggleLocationMode()}\n              >\n                <Ionicons name=\"locate\" size={18} color={useCurrentLocation ? \"#FFF\" : \"#777\"} />\n                <Text style={[styles.locationToggleText, useCurrentLocation && styles.activeLocationToggleText]}>\n                  Use Current Location\n                </Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity \n                style={[styles.locationToggleButton, !useCurrentLocation && styles.activeLocationToggle]}\n                onPress={() => !useCurrentLocation ? null : toggleLocationMode()}\n              >\n                <Ionicons name=\"create-outline\" size={18} color={!useCurrentLocation ? \"#FFF\" : \"#777\"} />\n                <Text style={[styles.locationToggleText, !useCurrentLocation && styles.activeLocationToggleText]}>\n                  Enter Manually\n                </Text>\n              </TouchableOpacity>\n            </View>\n            \n            {!useCurrentLocation ? (\n              <View style={styles.addressForm}>\n                <TextInput \n                  style={styles.addressInput}\n                  placeholder=\"Street Address\"\n                  value={userAddress.street}\n                  onChangeText={(text) => handleAddressChange('street', text)}\n                />\n                <TextInput \n                  style={styles.addressInput}\n                  placeholder=\"City\"\n                  value={userAddress.city}\n                  onChangeText={(text) => handleAddressChange('city', text)}\n                />\n                <View style={styles.addressRowInputs}>\n                  <TextInput \n                    style={[styles.addressInput, styles.addressSmallInput]}\n                    placeholder=\"State\"\n                    value={userAddress.state}\n                    onChangeText={(text) => handleAddressChange('state', text)}\n                  />\n                  <TextInput \n                    style={[styles.addressInput, styles.addressSmallInput]}\n                    placeholder=\"Pincode\"\n                    value={userAddress.pincode}\n                    onChangeText={(text) => handleAddressChange('pincode', text)}\n                    keyboardType=\"numeric\"\n                  />\n                </View>\n              </View>\n            ) : (\n              <View style={styles.currentLocationContainer}>\n                <Text style={styles.currentAddressText}>{userAddress.formatted}</Text>\n                <TouchableOpacity \n                  style={styles.refreshLocationButton}\n                  onPress={getCurrentLocation}\n                >\n                  <Ionicons name=\"refresh\" size={18} color=\"#FF5722\" />\n                  <Text style={styles.refreshLocationText}>Refresh Location</Text>\n                </TouchableOpacity>\n              </View>\n            )}\n            \n            <TouchableOpacity \n              style={styles.saveAddressButton}\n              onPress={saveAddress}\n            >\n              <Text style={styles.saveAddressButtonText}>Save Address</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n      \n      {/* Search Modal */}\n     <Modal\n  visible={isSearchModalOpen}\n  transparent={true}\n  animationType=\"slide\"\n  onRequestClose={() => setIsSearchModalOpen(false)}\n>\n  <View style={styles.searchModalContainer}>\n    <TouchableOpacity \n      style={styles.modalBackdrop}\n      activeOpacity={1}\n      onPress={() => setIsSearchModalOpen(false)}\n    />\n    \n    <View style={styles.searchModalContent}>\n      {/* Header with Search Input */}\n      <View style={styles.searchHeader}>\n        <View style={styles.searchInputContainer}>\n          <View style={styles.searchIconContainer}>\n            <Ionicons name=\"search\" size={20} color=\"#6B7280\" />\n          </View>\n          <TextInput \n            style={styles.searchInput}\n            placeholder=\"Search for groceries, vegetables...\"\n            placeholderTextColor=\"#9CA3AF\"\n            value={searchQuery}\n            onChangeText={setSearchQuery}\n            autoFocus\n            returnKeyType=\"search\"\n            onSubmitEditing={handleSearch}\n          />\n          {searchQuery.length > 0 && (\n            <TouchableOpacity \n              style={styles.clearButton}\n              onPress={() => setSearchQuery('')}\n            >\n              <Ionicons name=\"close-circle\" size={18} color=\"#9CA3AF\" />\n            </TouchableOpacity>\n          )}\n        </View>\n        \n        <TouchableOpacity \n          style={styles.closeButton}\n          onPress={() => setIsSearchModalOpen(false)}\n        >\n          <Ionicons name=\"close\" size={24} color=\"#374151\" />\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView \n        style={styles.searchContent}\n        showsVerticalScrollIndicator={false}\n        keyboardShouldPersistTaps=\"handled\"\n      >\n        {/* Search Action Button */}\n        {searchQuery.trim() !== '' && (\n          <TouchableOpacity \n            style={styles.searchActionButton}\n            onPress={handleSearch}\n          >\n            <View style={styles.searchActionContent}>\n              <Ionicons name=\"search\" size={16} color=\"#059669\" />\n              <Text style={styles.searchActionButtonText}>\n                Search for \"{searchQuery}\"\n              </Text>\n            </View>\n          </TouchableOpacity>\n        )}\n        \n        {/* Recent Searches */}\n        {searchHistory.length > 0 && searchQuery.trim() === '' && (\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Ionicons name=\"time-outline\" size={18} color=\"#6B7280\" />\n              <Text style={styles.sectionTitle}>Recent Searches</Text>\n            </View>\n            <View style={styles.recentSearchesList}>\n              {searchHistory.slice(0, 5).map((term, index) => (\n                <TouchableOpacity \n                  key={index}\n                  style={styles.recentSearchItem}\n                  onPress={() => selectSearchTerm(term)}\n                >\n                  <Ionicons name=\"search\" size={14} color=\"#9CA3AF\" />\n                  <Text style={styles.recentSearchText}>{term}</Text>\n                  <Ionicons name=\"arrow-up-outline\" size={14} color=\"#D1D5DB\" />\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n        )}\n        \n        {/* Recently Viewed */}\n        {recentlyViewed.length > 0 && searchQuery.trim() === '' && (\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Ionicons name=\"eye-outline\" size={18} color=\"#6B7280\" />\n              <Text style={styles.sectionTitle}>Recently Viewed</Text>\n            </View>\n            <ScrollView\n              horizontal\n              showsHorizontalScrollIndicator={false}\n              contentContainerStyle={styles.recentlyViewedList}\n            >\n              {recentlyViewed.map((item, index) => (\n               <TouchableOpacity \n  key={index}\n  style={styles.recentlyViewedItem}\n  onPress={() => {\n    setIsSearchModalOpen(false);\n    router.push(`/products/${item.id}`);\n  }}\n>\n\n                  <View style={styles.recentlyViewedImageContainer}>\n                    <Image \n                      source={{uri: item.imageUrl || 'https://via.placeholder.com/100'}}\n                      style={styles.recentlyViewedImage}\n                    />\n                  </View>\n                  <Text style={styles.recentlyViewedName} numberOfLines={2}>\n                    {item.name}\n                  </Text>\n                  <Text style={styles.recentlyViewedPrice}>₹{item.price}</Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          </View>\n        )}\n        \n        {/* Popular Searches */}\n        {searchQuery.trim() === '' && (\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Ionicons name=\"trending-up\" size={18} color=\"#6B7280\" />\n              <Text style={styles.sectionTitle}>Popular Searches</Text>\n            </View>\n            <View style={styles.popularSearchTags}>\n              {popularSearches.map((term, index) => (\n                <TouchableOpacity \n                  key={index}\n                  style={styles.popularSearchTag}\n                  onPress={() => selectSearchTerm(term)}\n                >\n                  <Text style={styles.popularSearchTagText}>{term}</Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n        )}\n\n        {/* Search Suggestions (if you have any based on searchQuery) */}\n        {searchQuery.trim() !== '' && (\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Ionicons name=\"bulb-outline\" size={18} color=\"#6B7280\" />\n              <Text style={styles.sectionTitle}>Suggestions</Text>\n            </View>\n            {/* Add your search suggestions here */}\n          </View>\n        )}\n      </ScrollView>\n    </View>\n  </View>\n</Modal>\n\n      \n      \n      {/* Cart Modal */}\n      {renderCartModal()}\n      \n      {/* Bottom Navigation */}\n      <View style={styles.bottomNav}>\n        <TouchableOpacity \n          style={styles.navItem}\n          onPress={() => router.push('/')}\n        >\n          <Ionicons name=\"home\" size={24} color=\"#FF5722\" />\n          <Text style={[styles.navText, styles.activeNavText]}>Home</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity \n          style={styles.navItem}\n          onPress={() => router.push('/categories')}\n        >\n          <Ionicons name=\"grid-outline\" size={24} color=\"#777\" />\n          <Text style={styles.navText}>Categories</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity \n          style={styles.navItem}\n          onPress={() => router.push('/orders')}\n        >\n          <Ionicons name=\"receipt-outline\" size={24} color=\"#777\" />\n          <Text style={styles.navText}>Orders</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity \n          style={styles.navItem}\n          onPress={() => router.push('/account')}\n        >\n          <Ionicons name=\"person-outline\" size={24} color=\"#777\" />\n          <Text style={styles.navText}>Account</Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n        </SafeAreaProvider>\n\n  )};\n\n// Define styles\nconst styles = StyleSheet.create({\n  container: {\n flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: '#FFFFFF',\n    borderBottomWidth: 0,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 3,\n  },\n  locationContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  locationText: {\n    fontSize: 15,\n    fontWeight: '600',\n    marginLeft: 8,\n    color: '#1E293B',\n  },\n  deliveryTimeText: {\n    fontSize: 13,\n    color: '#64748B',\n    marginLeft: 8,\n    fontWeight: '500',\n  },\n  headerActions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  headerButton: {\n    padding: 10,\n    marginLeft: 12,\n    borderRadius: 12,\n    backgroundColor: '#F8FAFC',\n  },\n  cartButton: {\n    padding: 10,\n    marginLeft: 10,\n    position: 'relative',\n    borderRadius: 12,\n    backgroundColor: '#F8FAFC',\n  },\n  cartBadge: {\n    position: 'absolute',\n    right: -2,\n    top: -2,\n    backgroundColor: '#6366F1',\n    borderRadius: 12,\n    width: 20,\n    height: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: '#FFFFFF',\n  },\n  cartBadgeText: {\n    color: '#FFFFFF',\n    fontSize: 11,\n    fontWeight: '700',\n  },\n  searchBar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    borderRadius: 16,\n    margin: 16,\n    paddingHorizontal: 16,\n    paddingVertical: 14,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.08,\n    shadowRadius: 12,\n    elevation: 4,\n    borderWidth: 1,\n    borderColor: '#E2E8F0',\n  },\n  searchPlaceholder: {\n    marginLeft: 12,\n    color: '#64748B',\n    fontSize: 15,\n    fontWeight: '500',\n  },\n  bannerContainer: {\n    paddingHorizontal: 16,\n    marginVertical: 12,\n  },\n  bannerImage: {\n    width: 340,\n    height: 180,\n    borderRadius: 20,\n    marginRight: 16,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.12,\n    shadowRadius: 16,\n    elevation: 6,\n  },\n  sectionTitle: {\n    fontSize: 22,\n    fontWeight: '700',\n    marginHorizontal: 16,\n    marginVertical: 16,\n    color: '#1E293B',\n    letterSpacing: -0.5,\n  },\n  categoriesContainer: {\n    paddingHorizontal: 16,\n    marginBottom: 20,\n  },\n  categoryItem: {\n    alignItems: 'center',\n    marginRight: 16,\n    width: 84,\n    borderRadius: 20,\n    padding: 12,\n    backgroundColor: '#FFFFFF',\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 3,\n  },\n  selectedCategoryItem: {\n    backgroundColor: '#EEF2FF',\n    borderWidth: 2,\n    borderColor: '#6366F1',\n    shadowColor: '#6366F1',\n    shadowOpacity: 0.15,\n  },\n  categoryImage: {\n    width: 56,\n    height: 56,\n    borderRadius: 28,\n    marginBottom: 8,\n  },\n  categoryName: {\n    fontSize: 13,\n    color: '#1E293B',\n    textAlign: 'center',\n    fontWeight: '600',\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    marginTop: 16,\n  },\n  seeAllButton: {\n    color: '#6366F1',\n    fontSize: 15,\n    fontWeight: '600',\n  },\n  productCard: {\n    width: 170,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 20,\n    marginHorizontal: 8,\n    marginVertical: 10,\n    overflow: 'hidden',\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.08,\n    shadowRadius: 12,\n    elevation: 5,\n  },\n  productImageContainer: {\n    position: 'relative',\n    height: 130,\n  },\n  productImage: {\n    width: '100%',\n    height: '100%',\n  },\n  wishlistButton: {\n    position: 'absolute',\n    top: 12,\n    right: 12,\n    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    justifyContent: 'center',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  productInfo: {\n    padding: 14,\n  },\n  productPrice: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#1E293B',\n  },\n  productName: {\n    fontSize: 15,\n    color: '#475569',\n    marginTop: 6,\n    fontWeight: '500',\n  },\n  productQuantity: {\n    fontSize: 13,\n    color: '#64748B',\n    marginTop: 4,\n    fontWeight: '500',\n  },\n  addButton: {\n    backgroundColor: '#6366F1',\n    borderRadius: 12,\n    paddingVertical: 10,\n    paddingHorizontal: 16,\n    alignItems: 'center',\n    marginTop: 12,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  addButtonText: {\n    color: '#FFFFFF',\n    fontWeight: '600',\n    fontSize: 15,\n  },\n  productsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    paddingHorizontal: 8,\n    marginBottom: 24,\n  },\n  loader: {\n    marginVertical: 32,\n  },\n  noResultsContainer: {\n    alignItems: 'center',\n    padding: 32,\n  },\n  noResultsImage: {\n    width: 220,\n    height: 160,\n    resizeMode: 'contain',\n    marginBottom: 24,\n  },\n  noResultsText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#475569',\n    marginBottom: 12,\n  },\n  resetSearchButton: {\n    color: '#6366F1',\n    fontSize: 15,\n    fontWeight: '600',\n  },\n  modalContainer: {\n    flex: 1,\n    backgroundColor: 'rgba(30, 41, 59, 0.6)',\n    justifyContent: 'flex-end',\n  },\n  modalContent: {\n    backgroundColor: '#FFFFFF',\n    borderTopLeftRadius: 24,\n    borderTopRightRadius: 24,\n    padding: 20,\n    maxHeight: '85%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: '#1E293B',\n  },\n  locationToggle: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n  },\n  locationToggleButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#F8FAFC',\n    padding: 14,\n    borderRadius: 16,\n    flex: 1,\n    marginHorizontal: 6,\n    justifyContent: 'center',\n    borderWidth: 2,\n    borderColor: 'transparent',\n  },\n  activeLocationToggle: {\n    backgroundColor: '#EEF2FF',\n    borderColor: '#6366F1',\n  },\n  locationToggleText: {\n    marginLeft: 8,\n    fontSize: 15,\n    color: '#64748B',\n    fontWeight: '500',\n  },\n  activeLocationToggleText: {\n    color: '#6366F1',\n    fontWeight: '600',\n  },\n  addressForm: {\n    marginBottom: 20,\n  },\n  addressInput: {\n    backgroundColor: '#F8FAFC',\n    borderRadius: 12,\n    padding: 16,\n    fontSize: 15,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: '#E2E8F0',\n    fontWeight: '500',\n  },\n  addressRowInputs: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  addressSmallInput: {\n    flex: 1,\n    marginHorizontal: 6,\n  },\n  currentLocationContainer: {\n    backgroundColor: '#F0F9FF',\n    borderRadius: 16,\n    padding: 16,\n    marginBottom: 20,\n    borderWidth: 1,\n    borderColor: '#BAE6FD',\n  },\n  currentAddressText: {\n    fontSize: 15,\n    color: '#1E293B',\n    marginBottom: 12,\n    fontWeight: '500',\n  },\n  refreshLocationButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  refreshLocationText: {\n    color: '#6366F1',\n    marginLeft: 8,\n    fontSize: 15,\n    fontWeight: '600',\n  },\n  saveAddressButton: {\n    backgroundColor: '#6366F1',\n    borderRadius: 16,\n    padding: 18,\n    alignItems: 'center',\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.2,\n    shadowRadius: 12,\n    elevation: 6,\n  },\n  saveAddressButtonText: {\n    color: '#FFFFFF',\n    fontSize: 17,\n    fontWeight: '600',\n  },\n  \n  cartModalContainer: {\n    flex: 1,\n    backgroundColor: '#FAFBFF',\n  },\n  cartHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: '#FFFFFF',\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 3,\n  },\n  cartTitle: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: '#1E293B',\n  },\n  clearCartText: {\n    color: '#DC2626',\n    fontSize: 15,\n    fontWeight: '600',\n  },\n  emptyCartContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 32,\n  },\n  emptyCartImage: {\n    width: 240,\n    height: 240,\n    resizeMode: 'contain',\n    marginBottom: 32,\n  },\n  emptyCartText: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: '#475569',\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n  startShoppingButton: {\n    backgroundColor: '#6366F1',\n    borderRadius: 16,\n    paddingVertical: 16,\n    paddingHorizontal: 32,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.2,\n    shadowRadius: 12,\n    elevation: 6,\n  },\n  startShoppingButtonText: {\n    color: '#FFFFFF',\n    fontSize: 17,\n    fontWeight: '600',\n  },\n  cartContent: {\n    flex: 1,\n  },\n  cartItemsContainer: {\n    flex: 1,\n    paddingHorizontal: 20,\n    paddingTop: 16,\n  },\n  cartItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    backgroundColor: '#FFFFFF',\n    borderRadius: 16,\n    marginBottom: 12,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 3,\n  },\n  cartItemImage: {\n    width: 80,\n    height: 80,\n    borderRadius: 16,\n  },\n  cartItemDetails: {\n    flex: 1,\n    marginLeft: 16,\n  },\n  cartItemName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1E293B',\n  },\n  cartItemPrice: {\n    fontSize: 15,\n    color: '#6366F1',\n    marginTop: 6,\n    fontWeight: '700',\n  },\n  quantityControl: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderRadius: 12,\n    overflow: 'hidden',\n    backgroundColor: '#F8FAFC',\n    borderWidth: 1,\n    borderColor: '#E2E8F0',\n  },\n  quantityButton: {\n    width: 36,\n    height: 36,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n  },\n  quantityButtonText: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#6366F1',\n  },\n  quantityText: {\n    width: 36,\n    textAlign: 'center',\n    fontSize: 16,\n    color: '#1E293B',\n    fontWeight: '600',\n  },\n  orderNotesContainer: {\n    marginTop: 20,\n    marginBottom: 16,\n  },\n  orderNotesLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1E293B',\n    marginBottom: 12,\n  },\n  orderNotesInput: {\n    backgroundColor: '#F8FAFC',\n    borderRadius: 12,\n    padding: 16,\n    height: 100,\n    textAlignVertical: 'top',\n    fontSize: 15,\n    borderWidth: 1,\n    borderColor: '#E2E8F0',\n    fontWeight: '500',\n  },\n  deliveryTimeContainer: {\n    marginTop: 20,\n    marginBottom: 16,\n  },\n  deliveryTimeLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1E293B',\n    marginBottom: 12,\n  },\n  timeSlotButton: {\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n    borderRadius: 12,\n    backgroundColor: '#F8FAFC',\n    marginRight: 12,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: '#E2E8F0',\n  },\n  selectedTimeSlotButton: {\n    backgroundColor: '#EEF2FF',\n    borderColor: '#6366F1',\n  },\n  timeSlotText: {\n    fontSize: 14,\n    color: '#475569',\n    fontWeight: '500',\n  },\n  selectedTimeSlotText: {\n    color: '#6366F1',\n    fontWeight: '600',\n  },\n  paymentMethodContainer: {\n    marginTop: 20,\n    marginBottom: 16,\n  },\n  paymentMethodLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1E293B',\n    marginBottom: 12,\n  },\n  paymentOptions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 20,\n  },\n  paymentOption: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#F8FAFC',\n    borderRadius: 12,\n    padding: 16,\n    flex: 1,\n    marginHorizontal: 6,\n    borderWidth: 1,\n    borderColor: '#E2E8F0',\n  },\n  selectedPaymentOption: {\n    backgroundColor: '#F0FDF4',\n    borderColor: '#10B981',\n  },\n  paymentOptionText: {\n    fontSize: 14,\n    color: '#1E293B',\n    marginLeft: 12,\n    fontWeight: '500',\n  },\n  cardDetailsContainer: {\n    marginTop: 16,\n  },\n  cardInput: {\n    backgroundColor: '#F8FAFC',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    fontSize: 15,\n    borderWidth: 1,\n    borderColor: '#E2E8F0',\n    fontWeight: '500',\n  },\n  cardRowInputs: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  cardSmallInput: {\n    flex: 1,\n    marginHorizontal: 6,\n  },\n  cartSummary: {\n    backgroundColor: '#FFFFFF',\n    padding: 20,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: -2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 8,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  summaryLabel: {\n    fontSize: 15,\n    color: '#64748B',\n    fontWeight: '500',\n  },\n  summaryValue: {\n    fontSize: 15,\n    color: '#1E293B',\n    fontWeight: '600',\n  },\n  totalRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 12,\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#E2E8F0',\n  },\n  totalLabel: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#1E293B',\n  },\n  totalValue: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: '#1E293B',\n  },\n  checkoutButton: {\n    backgroundColor: '#6366F1',\n    borderRadius: 16,\n    padding: 18,\n    alignItems: 'center',\n    marginTop: 20,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.2,\n    shadowRadius: 12,\n    elevation: 6,\n  },\n  checkoutButtonText: {\n    color: '#FFFFFF',\n    fontSize: 17,\n    fontWeight: '600',\n  },\n  activeOrdersContainer: {\n    marginVertical: 20,\n  },\n  activeOrderCard: {\n    backgroundColor: '#FFFFFF',\n    borderRadius: 20,\n    padding: 16,\n    marginLeft: 16,\n    marginRight: 8,\n    width: 280,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.08,\n    shadowRadius: 12,\n    elevation: 5,\n  },\n  activeOrderHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  activeOrderId: {\n    fontSize: 15,\n    fontWeight: '600',\n    color: '#1E293B',\n  },\n  activeOrderStatusContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#F0FDF4',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 8,\n  },\n  activeOrderStatusDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    marginRight: 6,\n  },\n  activeOrderStatusText: {\n    fontSize: 12,\n    color: '#059669',\n    fontWeight: '600',\n  },\n  activeOrderShop: {\n    fontSize: 17,\n    fontWeight: '700',\n    color: '#1E293B',\n    marginBottom: 6,\n  },\n  activeOrderItems: {\n    fontSize: 14,\n    color: '#64748B',\n    marginBottom: 12,\n    fontWeight: '500',\n  },\n  activeOrderTotal: {\n    fontSize: 17,\n    fontWeight: '700',\n    color: '#6366F1',\n    marginBottom: 12,\n  },\n  activeOrderFooter: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#F8FAFC',\n    padding: 8,\n    borderRadius: 8,\n  },\n  activeOrderDelivery: {\n    fontSize: 13,\n    color: '#475569',\n    marginLeft: 8,\n    fontWeight: '500',\n  },\n  bottomNav: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    paddingVertical: 16,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: -2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 8,\n  },\n  navItem: {\n    alignItems: 'center',\n    padding: 8,\n    borderRadius: 12,\n    minWidth: 60,\n  },\n  activeNavItem: {\n    backgroundColor: '#EEF2FF',\n  },\n  navText: {\n    fontSize: 12,\n    color: '#64748B',\n    marginTop: 6,\n    fontWeight: '600',\n  },\n  activeNavText: {\n    color: '#6366F1',\n    fontWeight: '700',\n  },\n  clearFilterButton: {\n    color: '#6366F1',\n    fontSize: 15,\n    fontWeight: '600',\n  },\n  cartItemRemoveButton: {\n    backgroundColor: '#FEF2F2',\n    borderRadius: 12,\n    padding: 8,\n    marginLeft: 12,\n    borderWidth: 1,\n    borderColor: '#FECACA',\n  },\n searchModalContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    justifyContent: 'flex-end',\n    zIndex: 1000,\n  },\n  modalBackdrop: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  searchModalContent: {\n    backgroundColor: '#FFFFFF',\n    borderTopLeftRadius: 24,\n    borderTopRightRadius: 24,\n    maxHeight: '85%',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 12,\n    elevation: 8,\n    zIndex: 1001,\n  },\n  searchHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingTop: 24,\n    paddingBottom: 16,\n    backgroundColor: '#FFFFFF',\n    borderBottomWidth: 1,\n    borderBottomColor: '#F3F4F6',\n  },\n  searchInputContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#F9FAFB',\n    borderRadius: 16,\n    paddingHorizontal: 16,\n    height: 48,\n    marginRight: 12,\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n  },\n  searchIconContainer: {\n    marginRight: 12,\n  },\n  searchInput: {\n    flex: 1,\n    fontSize: 16,\n    color: '#111827',\n    fontWeight: '400',\n  },\n  clearButton: {\n    padding: 4,\n    marginLeft: 8,\n  },\n  closeButton: {\n    width: 44,\n    height: 44,\n    borderRadius: 22,\n    backgroundColor: '#F3F4F6',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  searchContent: {\n    flex: 1,\n    paddingHorizontal: 20,\n  },\n  searchActionButton: {\n    backgroundColor: '#ECFDF5',\n    borderRadius: 12,\n    paddingVertical: 16,\n    paddingHorizontal: 20,\n    marginTop: 16,\n    borderWidth: 1,\n    borderColor: '#A7F3D0',\n  },\n  searchActionContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  searchActionButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#059669',\n    marginLeft: 8,\n  },\n  section: {\n    marginTop: 24,\n    marginBottom: 8,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#374151',\n    marginLeft: 8,\n  },\n  recentSearchesList: {\n    gap: 8,\n  },\n  recentSearchItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#F9FAFB',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#F3F4F6',\n  },\n  recentSearchText: {\n    flex: 1,\n    fontSize: 15,\n    color: '#374151',\n    marginLeft: 12,\n    fontWeight: '400',\n  },\n  recentlyViewedList: {\n    paddingRight: 20,\n  },\n  recentlyViewedItem: {\n    width: 100,\n    marginRight: 16,\n    alignItems: 'center',\n  },\n  recentlyViewedImageContainer: {\n    width: 80,\n    height: 80,\n    borderRadius: 16,\n    backgroundColor: '#F9FAFB',\n    marginBottom: 8,\n    overflow: 'hidden',\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n  },\n  recentlyViewedImage: {\n    width: '100%',\n    height: '100%',\n    resizeMode: 'cover',\n  },\n  recentlyViewedName: {\n    fontSize: 12,\n    color: '#374151',\n    textAlign: 'center',\n    fontWeight: '500',\n    lineHeight: 16,\n    marginBottom: 4,\n  },\n  recentlyViewedPrice: {\n    fontSize: 13,\n    color: '#059669',\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  popularSearchTags: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  popularSearchTag: {\n    backgroundColor: '#F3F4F6',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n  },\n  popularSearchTagText: {\n    fontSize: 14,\n    color: '#6B7280',\n    fontWeight: '500',\n  },\n});","size_bytes":85065},"app/index.tsx":{"content":"import { Ionicons } from \"@expo/vector-icons\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { router } from \"expo-router\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged } from \"firebase/auth\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  ActivityIndicator,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  SafeAreaView,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View\n} from \"react-native\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { auth, db } from \"../firebaseConfig\"; // Adjust the path as necessary\n\nexport default function LoginScreen() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [fullName, setFullName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(true);\n\n  // Check if user is already logged in on component mount\n  useEffect(() => {\n    const checkAuthState = async () => {\n      try {\n        // Check AsyncStorage for stored user data\n        const storedUserData = await AsyncStorage.getItem('userData');\n        \n        if (storedUserData) {\n          const userData = JSON.parse(storedUserData);\n          // Verify the token is still valid by checking current auth state\n          const unsubscribe = onAuthStateChanged(auth, async (user) => {\n            if (user && user.uid === userData.uid) {\n              // User is still authenticated, redirect to home\n              router.replace(\"/home\");\n            } else {\n              // Token expired or invalid, clear storage\n              await AsyncStorage.removeItem('userData');\n              setInitialLoading(false);\n            }\n            unsubscribe();\n          });\n        } else {\n          // No stored data, check current auth state\n          const unsubscribe = onAuthStateChanged(auth, (user) => {\n            if (user) {\n              // User is authenticated but no stored data, store and redirect\n              storeUserData(user);\n              router.replace(\"/home\");\n            } else {\n              setInitialLoading(false);\n            }\n            unsubscribe();\n          });\n        }\n      } catch (error) {\n        console.error('Error checking auth state:', error);\n        setInitialLoading(false);\n      }\n    };\n\n    checkAuthState();\n  }, []);\n\n  // Function to store user data in AsyncStorage\n  const storeUserData = async (user) => {\n    try {\n      // Get additional user data from Firestore\n      const userDocRef = doc(db, \"users\", user.uid);\n      const userDoc = await getDoc(userDocRef);\n      \n      const userData = {\n        uid: user.uid,\n        email: user.email,\n        displayName: user.displayName,\n        photoURL: user.photoURL,\n        emailVerified: user.emailVerified,\n        lastLoginAt: new Date().toISOString(),\n        ...(userDoc.exists() ? userDoc.data() : {})\n      };\n\n      await AsyncStorage.setItem('userData', JSON.stringify(userData));\n      console.log('User data stored successfully');\n    } catch (error) {\n      console.error('Error storing user data:', error);\n    }\n  };\n\n  // Function to clear user data from AsyncStorage\n  const clearUserData = async () => {\n    try {\n      await AsyncStorage.removeItem('userData');\n      console.log('User data cleared successfully');\n    } catch (error) {\n      console.error('Error clearing user data:', error);\n    }\n  };\n\n  const handleSignup = async () => {\n    if (!email || !password || !fullName || !phoneNumber) {\n      Alert.alert(\"Error\", \"Please fill in all fields\");\n      return;\n    }\n    \n    if (password.length < 6) {\n      Alert.alert(\"Error\", \"Password must be at least 6 characters long\");\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      // Create user account\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n      \n      // Save additional user data to Firestore\n      const userDocData = {\n        uid: user.uid,\n        email: email.toLowerCase(),\n        fullName: fullName.trim(),\n        phoneNumber: phoneNumber.trim(),\n        createdAt: new Date().toISOString(),\n        profileCompleted: false, // Will be true after location selection\n        isActive: true,\n        locationSelected: false // Track if user has selected location\n      };\n\n      await setDoc(doc(db, \"users\", user.uid), userDocData);\n      \n      // Store user data in AsyncStorage\n      await storeUserData(user);\n      \n      // Clear form\n      setEmail(\"\");\n      setPassword(\"\");\n      setFullName(\"\");\n      setPhoneNumber(\"\");\n      \n      // Navigate to home page using Expo Router\n      router.replace(\"/home\");\n      \n    } catch (err) {\n      let errorMessage = \"An error occurred during signup\";\n      \n      switch (err.code) {\n        case 'auth/email-already-in-use':\n          errorMessage = \"This email is already registered. Please use a different email or try logging in.\";\n          break;\n        case 'auth/invalid-email':\n          errorMessage = \"Please enter a valid email address.\";\n          break;\n        case 'auth/weak-password':\n          errorMessage = \"Password is too weak. Please choose a stronger password.\";\n          break;\n        default:\n          errorMessage = err.message;\n      }\n      \n      Alert.alert(\"Signup Error\", errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleLogin = async () => {\n    if (!email || !password) {\n      Alert.alert(\"Error\", \"Please fill in all fields\");\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n      \n      // Store user data in AsyncStorage\n      await storeUserData(user);\n      \n      // Clear form on successful login\n      setEmail(\"\");\n      setPassword(\"\");\n      \n      // Navigate to main app after successful login\n      router.replace(\"/home\");\n      \n    } catch (err) {\n      let errorMessage = \"An error occurred during login\";\n      \n      switch (err.code) {\n        case 'auth/user-not-found':\n          errorMessage = \"No account found with this email. Please check your email or sign up.\";\n          break;\n        case 'auth/wrong-password':\n          errorMessage = \"Incorrect password. Please try again.\";\n          break;\n        case 'auth/invalid-email':\n          errorMessage = \"Please enter a valid email address.\";\n          break;\n        case 'auth/too-many-requests':\n          errorMessage = \"Too many failed attempts. Please try again later.\";\n          break;\n        case 'auth/invalid-credential':\n          errorMessage = \"Invalid email or password. Please check your credentials.\";\n          break;\n        default:\n          errorMessage = err.message;\n      }\n      \n      Alert.alert(\"Login Error\", errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleForgotPassword = () => {\n    // Navigate to forgot password screen\n    router.push(\"/forgot-password\");\n  };\n\n  const handleSocialLogin = (provider) => {\n    // Handle social login based on provider\n    console.log(`Social login with ${provider}`);\n    // You can implement actual social login logic here\n  };\n\n  // Show loading screen while checking authentication state\n  if (initialLoading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <LinearGradient\n          colors={['#667eea', '#764ba2']}\n          style={[styles.gradient, styles.loadingContainer]}\n        >\n          <View style={styles.logoContainer}>\n            <Ionicons name=\"storefront\" size={50} color=\"#fff\" />\n          </View>\n          <Text style={styles.brandName}>Lakesmart</Text>\n          <ActivityIndicator \n            size=\"large\" \n            color=\"#fff\" \n            style={{ marginTop: 20 }} \n          />\n          <Text style={[styles.tagline, { marginTop: 16 }]}>\n            Loading...\n          </Text>\n        </LinearGradient>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <LinearGradient\n        colors={['#667eea', '#764ba2']}\n        style={styles.gradient}\n      >\n        <KeyboardAvoidingView\n          behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n          style={styles.keyboardView}\n        >\n          <ScrollView \n            contentContainerStyle={styles.scrollContainer}\n            showsVerticalScrollIndicator={false}\n          >\n            {/* Header */}\n            <View style={styles.header}>\n              <View style={styles.logoContainer}>\n                <Ionicons name=\"storefront\" size={50} color=\"#fff\" />\n              </View>\n              <Text style={styles.brandName}>Lakesmart</Text>\n              <Text style={styles.tagline}>“Why just shop, when you can LakeSmart?”</Text>\n            </View>\n\n            {/* Form Container */}\n            <View style={styles.formContainer}>\n              {/* Toggle Buttons */}\n              <View style={styles.toggleContainer}>\n                <TouchableOpacity\n                  style={[styles.toggleButton, isLogin && styles.activeToggle]}\n                  onPress={() => setIsLogin(true)}\n                >\n                  <Text style={[styles.toggleText, isLogin && styles.activeToggleText]}>\n                    Login\n                  </Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  style={[styles.toggleButton, !isLogin && styles.activeToggle]}\n                  onPress={() => setIsLogin(false)}\n                >\n                  <Text style={[styles.toggleText, !isLogin && styles.activeToggleText]}>\n                    Sign Up\n                  </Text>\n                </TouchableOpacity>\n              </View>\n\n              {/* Form Fields */}\n              <View style={styles.inputContainer}>\n                {/* Name Field - Only for Signup */}\n                {!isLogin && (\n                  <View style={styles.inputWrapper}>\n                    <Ionicons name=\"person-outline\" size={20} color=\"#666\" style={styles.inputIcon} />\n                    <TextInput\n                      style={styles.input}\n                      placeholder=\"Full Name\"\n                      placeholderTextColor=\"#999\"\n                      value={fullName}\n                      onChangeText={setFullName}\n                      autoCapitalize=\"words\"\n                      autoCorrect={false}\n                    />\n                  </View>\n                )}\n\n                {/* Phone Field - Only for Signup */}\n                {!isLogin && (\n                  <View style={styles.inputWrapper}>\n                    <Ionicons name=\"call-outline\" size={20} color=\"#666\" style={styles.inputIcon} />\n                    <TextInput\n                      style={styles.input}\n                      placeholder=\"Phone Number\"\n                      placeholderTextColor=\"#999\"\n                      value={phoneNumber}\n                      onChangeText={setPhoneNumber}\n                      keyboardType=\"phone-pad\"\n                      autoCapitalize=\"none\"\n                      autoCorrect={false}\n                    />\n                  </View>\n                )}\n\n                <View style={styles.inputWrapper}>\n                  <Ionicons name=\"mail-outline\" size={20} color=\"#666\" style={styles.inputIcon} />\n                  <TextInput\n                    style={styles.input}\n                    placeholder=\"Email Address\"\n                    placeholderTextColor=\"#999\"\n                    value={email}\n                    onChangeText={setEmail}\n                    keyboardType=\"email-address\"\n                    autoCapitalize=\"none\"\n                    autoCorrect={false}\n                  />\n                </View>\n\n                <View style={styles.inputWrapper}>\n                  <Ionicons name=\"lock-closed-outline\" size={20} color=\"#666\" style={styles.inputIcon} />\n                  <TextInput\n                    style={[styles.input, styles.passwordInput]}\n                    placeholder=\"Password\"\n                    placeholderTextColor=\"#999\"\n                    secureTextEntry={!showPassword}\n                    value={password}\n                    onChangeText={setPassword}\n                    autoCapitalize=\"none\"\n                  />\n                  <TouchableOpacity\n                    style={styles.eyeIcon}\n                    onPress={() => setShowPassword(!showPassword)}\n                  >\n                    <Ionicons\n                      name={showPassword ? \"eye-outline\" : \"eye-off-outline\"}\n                      size={20}\n                      color=\"#666\"\n                    />\n                  </TouchableOpacity>\n                </View>\n\n                {/* Password strength indicator for signup */}\n                {!isLogin && password.length > 0 && (\n                  <View style={styles.passwordStrength}>\n                    <Text style={[\n                      styles.passwordStrengthText,\n                      password.length >= 6 ? styles.strongPassword : styles.weakPassword\n                    ]}>\n                      {password.length >= 6 ? \"✓ Strong password\" : \"⚠ Password must be at least 6 characters\"}\n                    </Text>\n                  </View>\n                )}\n              </View>\n\n              {/* Forgot Password */}\n              {isLogin && (\n                <TouchableOpacity style={styles.forgotPassword} onPress={handleForgotPassword}>\n                  <Text style={styles.forgotPasswordText}>Forgot Password?</Text>\n                </TouchableOpacity>\n              )}\n\n              {/* Action Button */}\n              <TouchableOpacity\n                style={[styles.actionButton, loading && styles.disabledButton]}\n                onPress={isLogin ? handleLogin : handleSignup}\n                disabled={loading}\n              >\n                {loading ? (\n                  <ActivityIndicator color=\"#fff\" size=\"small\" />\n                ) : (\n                  <Text style={styles.actionButtonText}>\n                    {isLogin ? \"Login\" : \"Create Account\"}\n                  </Text>\n                )}\n              </TouchableOpacity>\n\n              {/* Social Login */}\n              <View style={styles.socialContainer}>\n                <View style={styles.dividerContainer}>\n                  <View style={styles.divider} />\n                  <Text style={styles.dividerText}>or continue with</Text>\n                  <View style={styles.divider} />\n                </View>\n\n                <View style={styles.socialButtons}>\n                  <TouchableOpacity \n                    style={styles.socialButton}\n                    onPress={() => handleSocialLogin('google')}\n                  >\n                    <Ionicons name=\"logo-google\" size={24} color=\"#db4437\" />\n                  </TouchableOpacity>\n                  <TouchableOpacity \n                    style={styles.socialButton}\n                    onPress={() => handleSocialLogin('apple')}\n                  >\n                    <Ionicons name=\"logo-apple\" size={24} color=\"#000\" />\n                  </TouchableOpacity>\n                  <TouchableOpacity \n                    style={styles.socialButton}\n                    onPress={() => handleSocialLogin('facebook')}\n                  >\n                    <Ionicons name=\"logo-facebook\" size={24} color=\"#4267b2\" />\n                  </TouchableOpacity>\n                </View>\n              </View>\n\n              {/* Terms */}\n              <Text style={styles.termsText}>\n                By {isLogin ? \"logging in\" : \"signing up\"}, you agree to our{\" \"}\n                <Text \n                  style={styles.linkText}\n                  onPress={() => router.push(\"/terms-of-service\")}\n                >\n                  Terms of Service\n                </Text> and{\" \"}\n                <Text \n                  style={styles.linkText}\n                  onPress={() => router.push(\"https://example.com/privacy-policy\")}\n                >\n                  Privacy Policy\n                </Text>\n              </Text>\n            </View>\n          </ScrollView>\n        </KeyboardAvoidingView>\n      </LinearGradient>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: Platform.OS === 'android' ? 25 : 0,\n    flex: 1,\n  },\n  gradient: {\n    flex: 1,\n  },\n  keyboardView: {\n    flex: 1,\n  },\n  scrollContainer: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 40,\n  },\n  loadingContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  logoContainer: {\n    width: 80,\n    height: 80,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    borderRadius: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  brandName: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#fff',\n    marginBottom: 8,\n  },\n  tagline: {\n    fontSize: 16,\n    color: 'rgba(255, 255, 255, 0.8)',\n    textAlign: 'center',\n  },\n  formContainer: {\n    backgroundColor: '#fff',\n    borderRadius: 20,\n    padding: 24,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 10,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 20,\n    elevation: 10,\n  },\n  toggleContainer: {\n    flexDirection: 'row',\n    backgroundColor: '#f5f5f5',\n    borderRadius: 25,\n    padding: 4,\n    marginBottom: 24,\n  },\n  toggleButton: {\n    flex: 1,\n    paddingVertical: 12,\n    alignItems: 'center',\n    borderRadius: 20,\n  },\n  activeToggle: {\n    backgroundColor: '#667eea',\n    shadowColor: '#667eea',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  toggleText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#666',\n  },\n  activeToggleText: {\n    color: '#fff',\n  },\n  inputContainer: {\n    marginBottom: 16,\n  },\n  inputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#f8f9fa',\n    borderRadius: 12,\n    marginBottom: 16,\n    paddingHorizontal: 16,\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  inputIcon: {\n    marginRight: 12,\n  },\n  input: {\n    flex: 1,\n    fontSize: 16,\n    paddingVertical: 16,\n    color: '#333',\n  },\n  passwordInput: {\n    paddingRight: 40,\n  },\n  eyeIcon: {\n    position: 'absolute',\n    right: 16,\n    padding: 4,\n  },\n  forgotPassword: {\n    alignItems: 'flex-end',\n    marginBottom: 24,\n  },\n  forgotPasswordText: {\n    color: '#667eea',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  actionButton: {\n    backgroundColor: '#667eea',\n    borderRadius: 12,\n    paddingVertical: 16,\n    alignItems: 'center',\n    marginBottom: 24,\n    shadowColor: '#667eea',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    elevation: 5,\n  },\n  disabledButton: {\n    opacity: 0.7,\n  },\n  actionButtonText: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  socialContainer: {\n    marginBottom: 24,\n  },\n  dividerContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  divider: {\n    flex: 1,\n    height: 1,\n    backgroundColor: '#e9ecef',\n  },\n  dividerText: {\n    marginHorizontal: 16,\n    color: '#666',\n    fontSize: 14,\n  },\n  socialButtons: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    gap: 16,\n  },\n  socialButton: {\n    width: 50,\n    height: 50,\n    backgroundColor: '#f8f9fa',\n    borderRadius: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  termsText: {\n    fontSize: 12,\n    color: '#666',\n    textAlign: 'center',\n    lineHeight: 18,\n  },\n  linkText: {\n    color: '#667eea',\n    fontWeight: '500',\n  },\n  passwordStrength: {\n    marginTop: -8,\n    marginBottom: 8,\n    paddingHorizontal: 4,\n  },\n  passwordStrengthText: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  strongPassword: {\n    color: '#28a745',\n  },\n  weakPassword: {\n    color: '#dc3545',\n  },\n});","size_bytes":20425},"app/location.tsx":{"content":"import { Ionicons } from \"@expo/vector-icons\";\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport * as Location from 'expo-location';\nimport { doc, updateDoc } from \"firebase/firestore\";\nimport React, { useState } from \"react\";\nimport {\n    ActivityIndicator,\n    Alert,\n    FlatList,\n    Platform,\n    SafeAreaView,\n    ScrollView,\n    StyleSheet,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View\n} from \"react-native\";\nimport { db } from \"../firebaseConfig\";\n\nexport default function LocationSelectionScreen() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [locationLoading, setLocationLoading] = useState(false);\n  const [savedAddresses, setSavedAddresses] = useState([]);\n  const [showAddressForm, setShowAddressForm] = useState(false);\n  const [addressForm, setAddressForm] = useState({\n    street: \"\",\n    city: \"\",\n    state: \"\",\n    pincode: \"\",\n    landmark: \"\",\n    addressType: \"Home\"\n  });\n\n  const navigation = useNavigation();\n  const route = useRoute();\n  const { userId, userName } = route.params;\n\n  // Popular cities for quick selection\n  const popularCities = [\n    { id: 1, name: \"Mumbai\", state: \"Maharashtra\", icon: \"🏙️\" },\n    { id: 2, name: \"Delhi\", state: \"Delhi\", icon: \"🏛️\" },\n    { id: 3, name: \"Bangalore\", state: \"Karnataka\", icon: \"🌆\" },\n    { id: 4, name: \"Hyderabad\", state: \"Telangana\", icon: \"🏘️\" },\n    { id: 5, name: \"Chennai\", state: \"Tamil Nadu\", icon: \"🏖️\" },\n    { id: 6, name: \"Kolkata\", state: \"West Bengal\", icon: \"🏪\" },\n    { id: 7, name: \"Pune\", state: \"Maharashtra\", icon: \"🏫\" },\n    { id: 8, name: \"Ahmedabad\", state: \"Gujarat\", icon: \"🕌\" }\n  ];\n\n  const getCurrentLocation = async () => {\n    setLocationLoading(true);\n    try {\n      // Request location permission\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert(\n          'Permission Required',\n          'Please enable location access to use this feature'\n        );\n        setLocationLoading(false);\n        return;\n      }\n\n      // Get current location\n      let location = await Location.getCurrentPositionAsync({});\n      let address = await Location.reverseGeocodeAsync({\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n      });\n\n      if (address[0]) {\n        const currentAddr = address[0];\n        setCurrentLocation({\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude,\n          address: `${currentAddr.street || ''} ${currentAddr.city || ''}, ${currentAddr.region || ''} ${currentAddr.postalCode || ''}`.trim(),\n          city: currentAddr.city || '',\n          state: currentAddr.region || '',\n          pincode: currentAddr.postalCode || ''\n        });\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Unable to get current location. Please try again.');\n      console.error('Location error:', error);\n    } finally {\n      setLocationLoading(false);\n    }\n  };\n\n  const selectLocation = (location) => {\n    setSelectedLocation(location);\n  };\n\n  const handleAddressSubmit = () => {\n    if (!addressForm.street || !addressForm.city || !addressForm.state || !addressForm.pincode) {\n      Alert.alert(\"Error\", \"Please fill in all required fields\");\n      return;\n    }\n\n    const newAddress = {\n      id: Date.now(),\n      ...addressForm,\n      fullAddress: `${addressForm.street}, ${addressForm.city}, ${addressForm.state} - ${addressForm.pincode}${addressForm.landmark ? ', Near ' + addressForm.landmark : ''}`\n    };\n\n    setSavedAddresses(prev => [...prev, newAddress]);\n    setSelectedLocation(newAddress);\n    setShowAddressForm(false);\n    setAddressForm({\n      street: \"\",\n      city: \"\",\n      state: \"\",\n      pincode: \"\",\n      landmark: \"\",\n      addressType: \"Home\"\n    });\n  };\n\n  const saveLocationAndProceed = async () => {\n    if (!selectedLocation) {\n      Alert.alert(\"Error\", \"Please select a location first\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Update user document with location data\n      await updateDoc(doc(db, \"users\", userId), {\n        profileCompleted: true,\n        locationSelected: true,\n        selectedLocation: selectedLocation,\n        updatedAt: new Date().toISOString()\n      });\n\n      Alert.alert(\n        \"Welcome to ShopEase!\",\n        `Hi ${userName}, your location has been saved successfully. You can now start shopping!`,\n        [\n          {\n            text: \"Start Shopping\",\n            onPress: () => navigation.navigate('Home') // Navigate to main app\n          }\n        ]\n      );\n\n    } catch (error) {\n      Alert.alert(\"Error\", \"Failed to save location. Please try again.\");\n      console.error('Location save error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const renderPopularCity = ({ item }) => (\n    <TouchableOpacity\n      style={[\n        styles.cityCard,\n        selectedLocation?.id === item.id && styles.selectedCityCard\n      ]}\n      onPress={() => selectLocation(item)}\n    >\n      <Text style={styles.cityIcon}>{item.icon}</Text>\n      <Text style={styles.cityName}>{item.name}</Text>\n      <Text style={styles.stateName}>{item.state}</Text>\n    </TouchableOpacity>\n  );\n\n  const renderSavedAddress = ({ item }) => (\n    <TouchableOpacity\n      style={[\n        styles.addressCard,\n        selectedLocation?.id === item.id && styles.selectedAddressCard\n      ]}\n      onPress={() => selectLocation(item)}\n    >\n      <View style={styles.addressHeader}>\n        <Ionicons \n          name={item.addressType === 'Home' ? 'home' : item.addressType === 'Work' ? 'briefcase' : 'location'} \n          size={20} \n          color=\"#667eea\" \n        />\n        <Text style={styles.addressType}>{item.addressType}</Text>\n      </View>\n      <Text style={styles.addressText}>{item.fullAddress}</Text>\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <LinearGradient\n        colors={['#667eea', '#764ba2']}\n        style={styles.header}\n      >\n        <View style={styles.headerContent}>\n          <TouchableOpacity\n            style={styles.backButton}\n            onPress={() => navigation.goBack()}\n          >\n            <Ionicons name=\"arrow-back\" size={24} color=\"#fff\" />\n          </TouchableOpacity>\n          <View style={styles.headerTextContainer}>\n            <Text style={styles.headerTitle}>Select Your Location</Text>\n            <Text style={styles.headerSubtitle}>\n              Hi {userName}, please choose your delivery location\n            </Text>\n          </View>\n        </View>\n      </LinearGradient>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Current Location */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>📍 Current Location</Text>\n          <TouchableOpacity\n            style={styles.currentLocationButton}\n            onPress={getCurrentLocation}\n            disabled={locationLoading}\n          >\n            <View style={styles.currentLocationContent}>\n              <Ionicons name=\"location\" size={24} color=\"#667eea\" />\n              <View style={styles.currentLocationText}>\n                {locationLoading ? (\n                  <ActivityIndicator size=\"small\" color=\"#667eea\" />\n                ) : currentLocation ? (\n                  <>\n                    <Text style={styles.currentLocationTitle}>Current Location</Text>\n                    <Text style={styles.currentLocationAddress}>{currentLocation.address}</Text>\n                  </>\n                ) : (\n                  <>\n                    <Text style={styles.currentLocationTitle}>Use Current Location</Text>\n                    <Text style={styles.currentLocationSubtitle}>Enable location to detect automatically</Text>\n                  </>\n                )}\n              </View>\n            </View>\n            <Ionicons name=\"chevron-forward\" size={20} color=\"#667eea\" />\n          </TouchableOpacity>\n\n          {currentLocation && (\n            <TouchableOpacity\n              style={[\n                styles.selectCurrentButton,\n                selectedLocation?.latitude === currentLocation.latitude && styles.selectedButton\n              ]}\n              onPress={() => selectLocation(currentLocation)}\n            >\n              <Text style={[\n                styles.selectCurrentButtonText,\n                selectedLocation?.latitude === currentLocation.latitude && styles.selectedButtonText\n              ]}>\n                {selectedLocation?.latitude === currentLocation.latitude ? 'Selected' : 'Select This Location'}\n              </Text>\n            </TouchableOpacity>\n          )}\n        </View>\n\n        {/* Popular Cities */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>🏙️ Popular Cities</Text>\n          <FlatList\n            data={popularCities}\n            renderItem={renderPopularCity}\n            keyExtractor={(item) => item.id.toString()}\n            numColumns={2}\n            columnWrapperStyle={styles.cityRow}\n            scrollEnabled={false}\n          />\n        </View>\n\n        {/* Saved Addresses */}\n        {savedAddresses.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>🏠 Saved Addresses</Text>\n            <FlatList\n              data={savedAddresses}\n              renderItem={renderSavedAddress}\n              keyExtractor={(item) => item.id.toString()}\n              scrollEnabled={false}\n            />\n          </View>\n        )}\n\n        {/* Add New Address */}\n        <View style={styles.section}>\n          <TouchableOpacity\n            style={styles.addAddressButton}\n            onPress={() => setShowAddressForm(!showAddressForm)}\n          >\n            <Ionicons name=\"add-circle\" size={24} color=\"#667eea\" />\n            <Text style={styles.addAddressText}>Add New Address</Text>\n          </TouchableOpacity>\n\n          {showAddressForm && (\n            <View style={styles.addressForm}>\n              <Text style={styles.formTitle}>Add New Address</Text>\n              \n              <View style={styles.addressTypeContainer}>\n                {['Home', 'Work', 'Other'].map((type) => (\n                  <TouchableOpacity\n                    key={type}\n                    style={[\n                      styles.addressTypeButton,\n                      addressForm.addressType === type && styles.selectedAddressType\n                    ]}\n                    onPress={() => setAddressForm(prev => ({ ...prev, addressType: type }))}\n                  >\n                    <Text style={[\n                      styles.addressTypeButtonText,\n                      addressForm.addressType === type && styles.selectedAddressTypeText\n                    ]}>\n                      {type}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n\n              <TextInput\n                style={styles.formInput}\n                placeholder=\"Street Address *\"\n                value={addressForm.street}\n                onChangeText={(text) => setAddressForm(prev => ({ ...prev, street: text }))}\n              />\n              \n              <View style={styles.formRow}>\n                <TextInput\n                  style={[styles.formInput, styles.halfInput]}\n                  placeholder=\"City *\"\n                  value={addressForm.city}\n                  onChangeText={(text) => setAddressForm(prev => ({ ...prev, city: text }))}\n                />\n                <TextInput\n                  style={[styles.formInput, styles.halfInput]}\n                  placeholder=\"State *\"\n                  value={addressForm.state}\n                  onChangeText={(text) => setAddressForm(prev => ({ ...prev, state: text }))}\n                />\n              </View>\n              \n              <View style={styles.formRow}>\n                <TextInput\n                  style={[styles.formInput, styles.halfInput]}\n                  placeholder=\"Pincode *\"\n                  value={addressForm.pincode}\n                  onChangeText={(text) => setAddressForm(prev => ({ ...prev, pincode: text }))}\n                  keyboardType=\"numeric\"\n                />\n                <TextInput\n                  style={[styles.formInput, styles.halfInput]}\n                  placeholder=\"Landmark\"\n                  value={addressForm.landmark}\n                  onChangeText={(text) => setAddressForm(prev => ({ ...prev, landmark: text }))}\n                />\n              </View>\n\n              <View style={styles.formButtons}>\n                <TouchableOpacity\n                  style={styles.cancelButton}\n                  onPress={() => setShowAddressForm(false)}\n                >\n                  <Text style={styles.cancelButtonText}>Cancel</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  style={styles.saveButton}\n                  onPress={handleAddressSubmit}\n                >\n                  <Text style={styles.saveButtonText}>Save Address</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          )}\n        </View>\n      </ScrollView>\n\n      {/* Continue Button */}\n      {selectedLocation && (\n        <View style={styles.footer}>\n          <TouchableOpacity\n            style={[styles.continueButton, loading && styles.disabledButton]}\n            onPress={saveLocationAndProceed}\n            disabled={loading}\n          >\n            {loading ? (\n              <ActivityIndicator color=\"#fff\" size=\"small\" />\n            ) : (\n              <>\n                <Text style={styles.continueButtonText}>Continue Shopping</Text>\n                <Ionicons name=\"arrow-forward\" size={20} color=\"#fff\" />\n              </>\n            )}\n          </TouchableOpacity>\n        </View>\n      )}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f9fa',\n  },\n  header: {\n    paddingTop: Platform.OS === 'ios' ? 0 : 20,\n    paddingBottom: 20,\n  },\n  headerContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n  },\n  backButton: {\n    marginRight: 16,\n  },\n  headerTextContainer: {\n    flex: 1,\n  },\n  headerTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#fff',\n  },\n  headerSubtitle: {\n    fontSize: 14,\n    color: 'rgba(255, 255, 255, 0.8)',\n    marginTop: 4,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 20,\n  },\n  section: {\n    marginVertical: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 12,\n  },\n  currentLocationButton: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'between',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    marginBottom: 8,\n  },\n  currentLocationContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  currentLocationText: {\n    marginLeft: 12,\n    flex: 1,\n  },\n  currentLocationTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333',\n  },\n  currentLocationSubtitle: {\n    fontSize: 14,\n    color: '#666',\n    marginTop: 2,\n  },\n  currentLocationAddress: {\n    fontSize: 14,\n    color: '#666',\n    marginTop: 2,\n  },\n  selectCurrentButton: {\n    backgroundColor: '#667eea',\n    borderRadius: 8,\n    paddingVertical: 10,\n    alignItems: 'center',\n  },\n  selectedButton: {\n    backgroundColor: '#28a745',\n  },\n  selectCurrentButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  selectedButtonText: {\n    color: '#fff',\n  },\n  cityRow: {\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  cityCard: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    flex: 0.48,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderWidth: 2,\n    borderColor: 'transparent',\n  },\n  selectedCityCard: {\n    borderColor: '#667eea',\n    backgroundColor: '#f0f4ff',\n  },\n  cityIcon: {\n    fontSize: 32,\n    marginBottom: 8,\n  },\n  cityName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333',\n  },\n  stateName: {\n    fontSize: 12,\n    color: '#666',\n    marginTop: 2,\n  },\n  addressCard: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n    borderWidth: 2,\n    borderColor: 'transparent',\n  },\n  selectedAddressCard: {\n    borderColor: '#667eea',\n    backgroundColor: '#f0f4ff',\n  },\n  addressHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  addressType: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333',\n    marginLeft: 8,\n  },\n  addressText: {\n    fontSize: 14,\n    color: '#666',\n    lineHeight: 20,\n  },\n  addAddressButton: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 2,\n    borderColor: '#667eea',\n    borderStyle: 'dashed',\n  },\n  addAddressText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#667eea',\n    marginLeft: 8,\n  },\n  addressForm: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 20,\n    marginTop: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  formTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 16,\n  },\n  addressTypeContainer: {\n    flexDirection: 'row',\n    marginBottom: 16,\n  },\n  addressTypeButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    backgroundColor: '#f8f9fa',\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  selectedAddressType: {\n    backgroundColor: '#667eea',\n    borderColor: '#667eea',\n  },\n  addressTypeButtonText: {\n    fontSize: 14,\n    color: '#666',\n    fontWeight: '500',\n  },\n  selectedAddressTypeText: {\n    color: '#fff',\n  },\n  formInput: {\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n    borderRadius: 8,\n    padding: 12,\n    fontSize: 16,\n    marginBottom: 12,\n    backgroundColor: '#f8f9fa',\n  },\n  formRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  halfInput: {\n    flex: 0.48,\n  },\n  formButtons: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 8,\n  },\n  cancelButton: {\n    flex: 0.48,\n    paddingVertical: 12,\n    alignItems: 'center',\n    borderRadius: 8,\n    backgroundColor: '#f8f9fa',\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  cancelButtonText: {\n    color: '#666',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  saveButton: {\n    flex: 0.48,\n    paddingVertical: 12,\n    alignItems: 'center',\n    borderRadius: 8,\n    backgroundColor: '#667eea',\n  },\n  saveButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  footer: {\n    padding: 20,\n    backgroundColor: '#fff',\n    borderTopWidth: 1,\n    borderTopColor: '#e9ecef',\n  },\n  continueButton: {\n    backgroundColor: '#667eea',\n    borderRadius: 12,\n    paddingVertical: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    shadowColor: '#667eea',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    elevation: 5,\n  },\n  disabledButton: {\n    opacity: 0.7,\n  },\n  continueButtonText: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginRight: 8,\n  },\n});","size_bytes":20103},"app/navbar.tsx":{"content":"","size_bytes":0},"app/orders.tsx":{"content":"import { onAuthStateChanged, User } from 'firebase/auth';\nimport {\n    collection,\n    doc,\n    getDoc,\n    onSnapshot,\n    orderBy,\n    query,\n    serverTimestamp,\n    Timestamp,\n    updateDoc,\n    where\n} from 'firebase/firestore';\nimport React, { useEffect, useState } from 'react';\nimport {\n    ActivityIndicator,\n    Alert,\n    Dimensions,\n    FlatList,\n    Image,\n    Linking,\n    Modal,\n    RefreshControl,\n    ScrollView,\n    StyleSheet,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View,\n} from 'react-native';\nimport { auth, db } from '../firebaseConfig';\n\nconst { width } = Dimensions.get('window');\n\n// Types\ninterface DeliveryAddress {\n  city: string;\n  pincode: string;\n  state: string;\n  street: string;\n}\n\ninterface OrderItem {\n  imageUrl: string;\n  name: string;\n  price: number;\n  productId: string;\n  quantity: number;\n  shopId: string;\n}\n\ninterface Order {\n  id: string;\n  cancelledAt?: Timestamp;\n  createdAt: Timestamp;\n  customerNotes?: string;\n  deliveryAddress?: DeliveryAddress;\n  deliveryFee?: number;\n  items: OrderItem[];\n  orderId: string;\n  paymentMethod: 'cash' | 'online' | 'card';\n  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';\n  status: 'placed' | 'confirmed' | 'preparing' | 'out_for_delivery' | 'delivered' | 'cancelled';\n  total: number;\n  totalAmount: number;\n  updatedAt: Timestamp;\n  userEmail: string;\n  userId: string;\n}\n\ninterface UserData {\n  name?: string;\n  firstName?: string;\n  displayName?: string;\n  email?: string;\n  address?: DeliveryAddress;\n  phone?: string;\n}\n\ninterface Shopkeeper {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n  shopName?: string;\n  address?: string;\n}\n\nconst Orders: React.FC = () => {\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [userData, setUserData] = useState<UserData | null>(null);\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [paymentModalVisible, setPaymentModalVisible] = useState(false);\n  const [addressModalVisible, setAddressModalVisible] = useState(false);\n  const [shopkeeperModalVisible, setShopkeeperModalVisible] = useState(false);\n  const [shopkeeperListModalVisible, setShopkeeperListModalVisible] = useState(false);\n  const [cashAmount, setCashAmount] = useState('');\n  const [unsubscribeOrders, setUnsubscribeOrders] = useState<(() => void) | null>(null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [ordersLoaded, setOrdersLoaded] = useState(false);\n  const [shopkeepers, setShopkeepers] = useState<{[key: string]: Shopkeeper}>({});\n  const [selectedShopkeeper, setSelectedShopkeeper] = useState<Shopkeeper | null>(null);\n  const [orderShopkeepers, setOrderShopkeepers] = useState<Shopkeeper[]>([]);\n  const [loadingShopkeepers, setLoadingShopkeepers] = useState(false);\n  \n  // Address form states\n  const [newAddress, setNewAddress] = useState({\n    street: '',\n    city: '',\n    state: '',\n    pincode: ''\n  });\n\n  useEffect(() => {\n    const unsubscribeAuth = onAuthStateChanged(auth, (currentUser) => {\n      console.log('Auth state changed:', currentUser?.uid);\n      \n      // Clean up previous orders subscription\n      if (unsubscribeOrders) {\n        unsubscribeOrders();\n        setUnsubscribeOrders(null);\n      }\n      \n      setUser(currentUser);\n      setAuthLoading(false);\n      \n      if (currentUser) {\n        fetchUserData(currentUser.uid);\n        const unsubscribe = fetchOrders(currentUser.uid);\n        setUnsubscribeOrders(() => unsubscribe);\n      } else {\n        // Reset state when user logs out\n        setOrders([]);\n        setUserData(null);\n        setLoading(false);\n        setOrdersLoaded(false);\n        setSelectedOrder(null);\n        setModalVisible(false);\n        setPaymentModalVisible(false);\n        setAddressModalVisible(false);\n        setShopkeeperModalVisible(false);\n        setShopkeeperListModalVisible(false);\n        setCashAmount('');\n        setShopkeepers({});\n        setSelectedShopkeeper(null);\n        setOrderShopkeepers([]);\n      }\n    });\n\n    return () => {\n      unsubscribeAuth();\n      if (unsubscribeOrders) {\n        unsubscribeOrders();\n      }\n    };\n  }, []);\n\n  const fetchUserData = async (userId: string) => {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      if (userDoc.exists()) {\n        setUserData(userDoc.data() as UserData);\n      }\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n    }\n  };\n\n  const fetchShopkeeperData = async (shopId: string): Promise<Shopkeeper | null> => {\n    try {\n      // Check if we already have this shopkeeper's data\n      if (shopkeepers[shopId]) {\n        return shopkeepers[shopId];\n      }\n\n      console.log('Fetching shopkeeper data for shopId:', shopId);\n      const shopkeeperDoc = await getDoc(doc(db, 'shopkeepers', shopId));\n      \n      if (shopkeeperDoc.exists()) {\n        const data = shopkeeperDoc.data();\n        const shopkeeperData = {\n          id: shopId,\n          name: data.name || data.ownerName || 'Unknown',\n          phone: data.phone || data.phoneNumber || '',\n          email: data.email || '',\n          shopName: data.shopName || data.name || '',\n          address: data.address || ''\n        } as Shopkeeper;\n        \n        console.log('Fetched shopkeeper data:', shopkeeperData);\n        \n        // Cache the shopkeeper data\n        setShopkeepers(prev => ({\n          ...prev,\n          [shopId]: shopkeeperData\n        }));\n        \n        return shopkeeperData;\n      } else {\n        console.log('No shopkeeper document found for shopId:', shopId);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error fetching shopkeeper data for shopId:', shopId, error);\n      return null;\n    }\n  };\n\n  const getShopkeepersForOrder = async (order: Order): Promise<Shopkeeper[]> => {\n    try {\n      setLoadingShopkeepers(true);\n      const uniqueShopIds = [...new Set(order.items.map(item => item.shopId))];\n      console.log('Getting shopkeepers for shop IDs:', uniqueShopIds);\n      \n      const shopkeeperPromises = uniqueShopIds.map(shopId => fetchShopkeeperData(shopId));\n      const shopkeeperResults = await Promise.all(shopkeeperPromises);\n      \n      const validShopkeepers = shopkeeperResults.filter(shopkeeper => shopkeeper !== null) as Shopkeeper[];\n      console.log('Valid shopkeepers found:', validShopkeepers);\n      \n      setLoadingShopkeepers(false);\n      return validShopkeepers;\n    } catch (error) {\n      console.error('Error getting shopkeepers for order:', error);\n      setLoadingShopkeepers(false);\n      return [];\n    }\n  };\n\n  const makePhoneCall = (phone: string, shopkeeperName: string) => {\n    if (!phone || phone.trim() === '') {\n      Alert.alert('Error', 'Phone number not available for this shopkeeper');\n      return;\n    }\n\n    // Clean phone number (remove spaces, dashes, etc.)\n    const cleanPhone = phone.replace(/[^\\d+]/g, '');\n    \n    Alert.alert(\n      'Call Shopkeeper',\n      `Call ${shopkeeperName} at ${phone}?`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { \n          text: 'Call', \n          onPress: () => {\n            console.log('Making call to:', cleanPhone);\n            Linking.openURL(`tel:${cleanPhone}`)\n              .then(() => {\n                console.log('Call initiated successfully');\n              })\n              .catch((error) => {\n                console.error('Error making phone call:', error);\n                Alert.alert('Error', 'Unable to make phone call. Please check if the phone number is valid.');\n              });\n          }\n        }\n      ]\n    );\n  };\n\n  const showShopkeeperSelection = async (order: Order) => {\n    try {\n      console.log('Showing shopkeeper selection for order:', order.id);\n      const shopkeepersData = await getShopkeepersForOrder(order);\n      \n      if (shopkeepersData.length === 0) {\n        Alert.alert('Error', 'No shopkeeper information available for this order');\n        return;\n      }\n\n      if (shopkeepersData.length === 1) {\n        // Single shopkeeper - show details directly\n        const shopkeeper = shopkeepersData[0];\n        if (shopkeeper.phone && shopkeeper.phone.trim() !== '') {\n          makePhoneCall(shopkeeper.phone, shopkeeper.name);\n        } else {\n          Alert.alert('Error', 'Phone number not available for this shopkeeper');\n        }\n      } else {\n        // Multiple shopkeepers - show selection list\n        setOrderShopkeepers(shopkeepersData);\n        setShopkeeperListModalVisible(true);\n      }\n    } catch (error) {\n      console.error('Error showing shopkeeper selection:', error);\n      Alert.alert('Error', 'Failed to fetch shopkeeper details');\n    }\n  };\n\n  const showShopkeeperDetails = (shopkeeper: Shopkeeper) => {\n    setSelectedShopkeeper(shopkeeper);\n    setShopkeeperListModalVisible(false);\n    setShopkeeperModalVisible(true);\n  };\n\n  const getUserDisplayName = () => {\n    if (userData?.name) return userData.name;\n    if (userData?.firstName) return userData.firstName;\n    if (userData?.displayName) return userData.displayName;\n    if (user?.displayName) return user.displayName;\n    if (user?.email) return user.email.split('@')[0];\n    return 'User';\n  };\n\n  const getDeliveryAddress = (order: Order): DeliveryAddress | null => {\n    // First check order's delivery address\n    if (order.deliveryAddress) {\n      return order.deliveryAddress;\n    }\n    \n    // Then check user's address\n    if (userData?.address) {\n      return userData.address;\n    }\n    \n    return null;\n  };\n\n  const saveUserAddress = async () => {\n    if (!user || !newAddress.street || !newAddress.city || !newAddress.state || !newAddress.pincode) {\n      Alert.alert('Error', 'Please fill in all address fields');\n      return;\n    }\n\n    try {\n      const userRef = doc(db, 'users', user.uid);\n      await updateDoc(userRef, {\n        address: newAddress,\n        updatedAt: serverTimestamp()\n      });\n      \n      // Update local user data\n      setUserData(prev => ({\n        ...prev,\n        address: newAddress\n      }));\n      \n      setAddressModalVisible(false);\n      setNewAddress({ street: '', city: '', state: '', pincode: '' });\n      Alert.alert('Success', 'Address saved successfully');\n    } catch (error) {\n      console.error('Error saving address:', error);\n      Alert.alert('Error', 'Failed to save address. Please try again.');\n    }\n  };\n\n  const fetchOrders = (userId: string) => {\n    console.log('Fetching orders for user:', userId);\n    setLoading(true);\n    setOrdersLoaded(false);\n    \n    const ordersQuery = query(\n      collection(db, 'orders'),\n      where('userId', '==', userId),\n      orderBy('createdAt', 'desc')\n    );\n\n    const unsubscribe = onSnapshot(ordersQuery, (snapshot) => {\n      console.log('Orders snapshot received, size:', snapshot.size);\n      const ordersData: Order[] = [];\n      \n      snapshot.forEach((doc) => {\n        const data = doc.data();\n        console.log('Processing order:', doc.id, data);\n        \n        // Parse delivery address properly\n        let deliveryAddress = null;\n        if (data.deliveryAddress) {\n          if (Array.isArray(data.deliveryAddress) && data.deliveryAddress.length > 0) {\n            deliveryAddress = data.deliveryAddress[0];\n          } else if (typeof data.deliveryAddress === 'object') {\n            deliveryAddress = data.deliveryAddress;\n          }\n        }\n        \n        ordersData.push({\n          id: doc.id,\n          cancelledAt: data.cancelledAt,\n          createdAt: data.createdAt,\n          customerNotes: data.customerNotes || '',\n          deliveryAddress: deliveryAddress ? {\n            city: deliveryAddress.city || '',\n            pincode: deliveryAddress.pincode || '',\n            state: deliveryAddress.state || '',\n            street: deliveryAddress.street || ''\n          } : undefined,\n          deliveryFee: Number(data.deliveryFee) || 0,\n          items: data.items || [],\n          orderId: data.orderId || '',\n          paymentMethod: data.paymentMethod || 'cash',\n          paymentStatus: data.paymentStatus || 'pending',\n          status: data.status || 'placed',\n          total: Number(data.total) || 0,\n          totalAmount: Number(data.totalAmount) || Number(data.total) || 0,\n          updatedAt: data.updatedAt,\n          userEmail: data.userEmail || '',\n          userId: data.userId || ''\n        } as Order);\n      });\n      \n      console.log('Setting orders:', ordersData.length);\n      setOrders(ordersData);\n      setLoading(false);\n      setRefreshing(false);\n      setOrdersLoaded(true);\n    }, (error) => {\n      console.error('Error fetching orders:', error);\n      setLoading(false);\n      setRefreshing(false);\n      setOrdersLoaded(true);\n      Alert.alert('Error', 'Failed to fetch orders. Please try again.');\n    });\n\n    return unsubscribe;\n  };\n\n  const onRefresh = () => {\n    if (user) {\n      setRefreshing(true);\n      // Clean up and re-fetch\n      if (unsubscribeOrders) {\n        unsubscribeOrders();\n      }\n      const unsubscribe = fetchOrders(user.uid);\n      setUnsubscribeOrders(() => unsubscribe);\n    }\n  };\n\n  const cancelOrder = async (orderId: string) => {\n    try {\n      const orderRef = doc(db, 'orders', orderId);\n      await updateDoc(orderRef, {\n        status: 'cancelled',\n        cancelledAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n      \n      Alert.alert('Success', 'Order cancelled successfully');\n    } catch (error) {\n      console.error('Error cancelling order:', error);\n      Alert.alert('Error', 'Failed to cancel order. Please try again.');\n    }\n  };\n\n  const confirmCashPayment = async (orderId: string, amount: number) => {\n    if (!cashAmount || parseFloat(cashAmount) !== amount) {\n      Alert.alert('Error', 'Please enter the correct cash amount');\n      return;\n    }\n\n    try {\n      const orderRef = doc(db, 'orders', orderId);\n      await updateDoc(orderRef, {\n        paymentStatus: 'paid',\n        updatedAt: serverTimestamp()\n      });\n      \n      setPaymentModalVisible(false);\n      setCashAmount('');\n      Alert.alert('Success', 'Cash payment confirmed');\n    } catch (error) {\n      console.error('Error confirming payment:', error);\n      Alert.alert('Error', 'Failed to confirm payment. Please try again.');\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'placed': return '#FF6B35';\n      case 'confirmed': return '#4A90E2';\n      case 'preparing': return '#F5A623';\n      case 'out_for_delivery': return '#7ED321';\n      case 'delivered': return '#50E3C2';\n      case 'cancelled': return '#D0021B';\n      default: return '#9B9B9B';\n    }\n  };\n\n  const getPaymentStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid': return '#50E3C2';\n      case 'pending': return '#F5A623';\n      case 'failed': return '#D0021B';\n      case 'refunded': return '#4A90E2';\n      default: return '#9B9B9B';\n    }\n  };\n\n  const formatDate = (timestamp: Timestamp | null | undefined) => {\n    if (!timestamp) return 'N/A';\n    try {\n      const date = timestamp.toDate();\n      const now = new Date();\n      const diffTime = Math.abs(now.getTime() - date.getTime());\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      if (diffDays === 1) {\n        return 'Today';\n      } else if (diffDays === 2) {\n        return 'Yesterday';\n      } else if (diffDays <= 7) {\n        return `${diffDays - 1} days ago`;\n      } else {\n        return date.toLocaleDateString('en-IN', {\n          day: '2-digit',\n          month: 'short',\n          year: 'numeric'\n        });\n      }\n    } catch (error) {\n      return 'Invalid Date';\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const canCancelOrder = (order: Order) => {\n    return ['placed', 'confirmed'].includes(order.status) && !order.cancelledAt;\n  };\n\n  const showCashPaymentOption = (order: Order) => {\n    return order.paymentMethod === 'cash' && \n           order.paymentStatus === 'pending' && \n           order.status === 'delivered';\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'placed': return '📝';\n      case 'confirmed': return '✅';\n      case 'preparing': return '👨‍🍳';\n      case 'out_for_delivery': return '🚚';\n      case 'delivered': return '📦';\n      case 'cancelled': return '❌';\n      default: return '📋';\n    }\n  };\n\n  const renderOrderItem = ({ item }: { item: Order }) => (\n    <TouchableOpacity \n      style={styles.orderCard}\n      onPress={() => {\n        setSelectedOrder(item);\n        setModalVisible(true);\n      }}\n      activeOpacity={0.7}\n    >\n      <View style={styles.orderHeader}>\n        <View style={styles.orderIdContainer}>\n          <Text style={styles.orderIdLabel}>Order</Text>\n          <Text style={styles.orderId}>#{item.orderId}</Text>\n        </View>\n        <View style={[styles.statusBadge, { backgroundColor: getStatusColor(item.status) }]}>\n          <Text style={styles.statusIcon}>{getStatusIcon(item.status)}</Text>\n          <Text style={styles.statusText}>{item.status.replace('_', ' ').toUpperCase()}</Text>\n        </View>\n      </View>\n\n      <Text style={styles.orderDate}>{formatDate(item.createdAt)}</Text>\n\n      <View style={styles.itemsPreview}>\n        {item.items && item.items.length > 0 ? (\n          <>\n            <View style={styles.itemsRow}>\n              {item.items.slice(0, 3).map((product, index) => (\n                <View key={index} style={styles.itemPreview}>\n                  <Image \n                    source={{ uri: product.imageUrl || 'https://via.placeholder.com/60' }} \n                    style={styles.itemImage} \n                    onError={() => console.log('Image load error')}\n                  />\n                  <View style={styles.itemDetails}>\n                    <Text style={styles.itemName} numberOfLines={1}>\n                      {product.name || 'Unknown Product'}\n                    </Text>\n                    <Text style={styles.itemQuantity}>Qty: {product.quantity || 0}</Text>\n                    <Text style={styles.itemPrice}>₹{product.price || 0}</Text>\n                  </View>\n                </View>\n              ))}\n            </View>\n            {item.items.length > 3 && (\n              <View style={styles.moreItemsContainer}>\n                <Text style={styles.moreItems}>+{item.items.length - 3} more items</Text>\n              </View>\n            )}\n          </>\n        ) : (\n          <Text style={styles.noItems}>No items found</Text>\n        )}\n      </View>\n\n      <View style={styles.orderFooter}>\n        <View style={styles.paymentInfo}>\n          <View style={styles.paymentMethodContainer}>\n            <Text style={styles.paymentMethodLabel}>Payment:</Text>\n            <Text style={styles.paymentMethod}>{item.paymentMethod.toUpperCase()}</Text>\n          </View>\n          <View style={[styles.paymentStatusBadge, { backgroundColor: getPaymentStatusColor(item.paymentStatus) }]}>\n            <Text style={styles.paymentStatusText}>{item.paymentStatus.toUpperCase()}</Text>\n          </View>\n        </View>\n        <View style={styles.totalContainer}>\n          <Text style={styles.totalLabel}>Total</Text>\n          <Text style={styles.totalAmount}>₹{item.total || item.totalAmount}</Text>\n        </View>\n      </View>\n\n      <View style={styles.actionButtons}>\n        {/* Contact Shopkeeper Button */}\n        <TouchableOpacity \n          style={styles.contactButton}\n          onPress={() => showShopkeeperSelection(item)}\n          disabled={loadingShopkeepers}\n        >\n          <Text style={styles.contactButtonText}>\n            {loadingShopkeepers ? '⏳ Loading...' : '📞 Contact Shop'}\n          </Text>\n        </TouchableOpacity>\n\n        {canCancelOrder(item) && (\n          <TouchableOpacity \n            style={styles.cancelButton}\n            onPress={() => {\n              Alert.alert(\n                'Cancel Order',\n                'Are you sure you want to cancel this order?',\n                [\n                  { text: 'No', style: 'cancel' },\n                  { text: 'Yes', onPress: () => cancelOrder(item.id) }\n                ]\n              );\n            }}\n          >\n            <Text style={styles.cancelButtonText}>Cancel Order</Text>\n          </TouchableOpacity>\n        )}\n\n        {showCashPaymentOption(item) && (\n          <TouchableOpacity \n            style={styles.payButton}\n            onPress={() => {\n              setSelectedOrder(item);\n              setPaymentModalVisible(true);\n            }}\n          >\n            <Text style={styles.payButtonText}>Confirm Payment</Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n\n  // Show loading while auth is being determined or orders are being fetched\n  if (authLoading || (user && loading && !ordersLoaded)) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#4A90E2\" />\n        <Text style={styles.loadingText}>\n          {authLoading ? 'Checking authentication...' : 'Loading your orders...'}\n        </Text>\n      </View>\n    );\n  }\n\n  if (!user) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Text style={styles.emptyIcon}>🔐</Text>\n        <Text style={styles.emptyText}>Please log in to view your orders</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <View style={styles.greetingSection}>\n          <Text style={styles.greeting}>Hello, {getUserDisplayName()}! 👋</Text>\n          <Text style={styles.subGreeting}>Here are your recent orders</Text>\n        </View>\n      </View>\n      \n      {orders.length === 0 && ordersLoaded ? (\n        <View style={styles.emptyContainer}>\n          <Text style={styles.emptyIcon}>🛍️</Text>\n          <Text style={styles.emptyText}>No orders found</Text>\n          <Text style={styles.emptySubtext}>Start shopping to see your orders here!</Text>\n        </View>\n      ) : (\n        <FlatList\n          data={orders}\n          renderItem={renderOrderItem}\n          keyExtractor={(item) => item.id}\n          refreshControl={\n            <RefreshControl \n              refreshing={refreshing} \n              onRefresh={onRefresh}\n              colors={['#4A90E2']}\n              tintColor=\"#4A90E2\"\n            />\n          }\n          showsVerticalScrollIndicator={false}\n          contentContainerStyle={styles.listContainer}\n        />\n      )}\n\n      {/* Order Details Modal */}\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => setModalVisible(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={styles.modalContent}>\n            <ScrollView showsVerticalScrollIndicator={false}>\n              {selectedOrder && (\n                <>\n                  <View style={styles.modalHeader}>\n                    <Text style={styles.modalTitle}>Order Details</Text>\n                    <TouchableOpacity \n                      onPress={() => setModalVisible(false)}\n                      style={styles.closeButton}\n                    >\n                      <Text style={styles.closeButtonText}>✕</Text>\n                    </TouchableOpacity>\n                  </View>\n\n                  <View style={styles.orderDetailSection}>\n                    <Text style={styles.sectionTitle}>📋 Order Information</Text>\n                    <View style={styles.infoRow}>\n                      <Text style={styles.infoLabel}>Order ID:</Text>\n                      <Text style={styles.infoValue}>{selectedOrder.orderId}</Text>\n                    </View>\n                    <View style={styles.infoRow}>\n                      <Text style={styles.infoLabel}>Date:</Text>\n                      <Text style={styles.infoValue}>{formatDate(selectedOrder.createdAt)}</Text>\n                    </View>\n                    <View style={styles.infoRow}>\n                      <Text style={styles.infoLabel}>Status:</Text>\n                      <View style={[styles.statusBadge, { backgroundColor: getStatusColor(selectedOrder.status) }]}>\n                        <Text style={styles.statusText}>{selectedOrder.status.replace('_', ' ').toUpperCase()}</Text>\n                      </View>\n                    </View>\n                    <View style={styles.infoRow}>\n                      <Text style={styles.infoLabel}>Payment:</Text>\n                      <Text style={styles.infoValue}>\n                        {selectedOrder.paymentMethod.toUpperCase()} ({selectedOrder.paymentStatus})\n                      </Text>\n                    </View>\n                  </View>\n\n                  <View style={styles.orderDetailSection}>\n                    <Text style={styles.sectionTitle}>🏠 Delivery Address</Text>\n                    {(() => {\n                      const address = getDeliveryAddress(selectedOrder);\n                      if (address) {\n                        return (\n                          <View style={styles.addressContainer}>\n                            <Text style={styles.addressText}>{address.street}</Text>\n                            <Text style={styles.addressText}>{address.city}, {address.state}</Text>\n                            <Text style={styles.addressText}>PIN: {address.pincode}</Text>\n                          </View>\n                        );\n                      } else {\n                        return (\n                          <View style={styles.noAddressContainer}>\n                            <Text style={styles.noAddress}>No delivery address available</Text>\n                            <TouchableOpacity \n                              style={styles.addAddressButton}\n                              onPress={() => setAddressModalVisible(true)}\n                            >\n                              <Text style={styles.addAddressButtonText}>Add Address</Text>\n                            </TouchableOpacity>\n                          </View>\n                        );\n                      }\n                    })()}\n                  </View>\n\n                  <View style={styles.orderDetailSection}>\n                    <Text style={styles.sectionTitle}>🛍️ Items ({selectedOrder.items?.length || 0})</Text>\n                    {selectedOrder.items && selectedOrder.items.length > 0 ? (\n                      selectedOrder.items.map((item, index) => (\n                        <View key={index} style={styles.modalItem}>\n                          <Image \n                            source={{ uri: item.imageUrl || 'https://via.placeholder.com/60' }} \n                            style={styles.modalItemImage} \n                            onError={() => console.log('Modal image load error')}\n                          />\n                          <View style={styles.modalItemDetails}>\n                            <Text style={styles.modalItemName}>{item.name || 'Unknown Product'}</Text>\n                            <Text style={styles.modalItemPrice}>₹{item.price || 0} × {item.quantity || 0}</Text>\n                          </View>\n                          <Text style={styles.modalItemTotal}>₹{(item.price || 0) * (item.quantity || 0)}</Text>\n                        </View>\n                      ))\n                    ) : (\n                      <Text style={styles.noItems}>No items found</Text>\n                    )}\n                  </View>\n\n                  <View style={styles.orderDetailSection}>\n                    <Text style={styles.sectionTitle}>💳 Payment Summary</Text>\n                    <View style={styles.summaryContainer}>\n                      <View style={styles.summaryRow}>\n                        <Text style={styles.summaryLabel}>Subtotal:</Text>\n                        <Text style={styles.summaryValue}>₹{(selectedOrder.total || selectedOrder.totalAmount) - (selectedOrder.deliveryFee || 0)}</Text>\n                      </View>\n                      <View style={styles.summaryRow}>\n                        <Text style={styles.summaryLabel}>Delivery Fee:</Text>\n                        <Text style={styles.summaryValue}>₹{selectedOrder.deliveryFee || 0}</Text>\n                      </View>\n                      <View style={[styles.summaryRow, styles.totalRow]}>\n                        <Text style={styles.totalLabel}>Total:</Text>\n                        <Text style={styles.totalValue}>₹{selectedOrder.total || selectedOrder.totalAmount}</Text>\n                      </View>\n                    </View>\n                  </View>\n\n                  {selectedOrder.customerNotes && (\n                    <View style={styles.orderDetailSection}>\n                      <Text style={styles.sectionTitle}>📝 Customer Notes</Text>\n                      <Text style={styles.notesText}>{selectedOrder.customerNotes}</Text>\n                    </View>\n                  )}\n\n                  {/* Modal Action Buttons */}\n                  <View style={styles.modalActionButtons}>\n                    <TouchableOpacity \n                      style={styles.modalContactButton}\n                      onPress={() => {\n                        setModalVisible(false);\n                        showShopkeeperDetails(selectedOrder);\n                      }}\n                    >\n                      <Text style={styles.modalContactButtonText}>📞 Contact Shop</Text>\n                    </TouchableOpacity>\n\n                    {canCancelOrder(selectedOrder) && (\n                      <TouchableOpacity \n                        style={styles.modalCancelButton}\n                        onPress={() => {\n                          Alert.alert(\n                            'Cancel Order',\n                            'Are you sure you want to cancel this order?',\n                            [\n                              { text: 'No', style: 'cancel' },\n                              { \n                                text: 'Yes', \n                                onPress: () => {\n                                  cancelOrder(selectedOrder.id);\n                                  setModalVisible(false);\n                                }\n                              }\n                            ]\n                          );\n                        }}\n                      >\n                        <Text style={styles.modalCancelButtonText}>Cancel Order</Text>\n                      </TouchableOpacity>\n                    )}\n\n                    {showCashPaymentOption(selectedOrder) && (\n                      <TouchableOpacity \n                        style={styles.modalPayButton}\n                        onPress={() => {\n                          setModalVisible(false);\n                          setPaymentModalVisible(true);\n                        }}\n                      >\n                        <Text style={styles.modalPayButtonText}>Confirm Payment</Text>\n                      </TouchableOpacity>\n                    )}\n                  </View>\n                </>\n              )}\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Shopkeeper Details Modal */}\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={shopkeeperModalVisible}\n        onRequestClose={() => setShopkeeperModalVisible(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={styles.shopkeeperModalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Shopkeeper Details</Text>\n              <TouchableOpacity \n                onPress={() => setShopkeeperModalVisible(false)}\n                style={styles.closeButton}\n              >\n                <Text style={styles.closeButtonText}>✕</Text>\n              </TouchableOpacity>\n            </View>\n\n            {selectedShopkeeper && (\n              <View style={styles.shopkeeperDetails}>\n                <View style={styles.shopkeeperHeader}>\n                  <Text style={styles.shopkeeperIcon}>🏪</Text>\n                  <View style={styles.shopkeeperInfo}>\n                    <Text style={styles.shopkeeperName}>\n                      {selectedShopkeeper.shopName || selectedShopkeeper.name}\n                    </Text>\n                    <Text style={styles.shopkeeperOwner}>\n                      Owner: {selectedShopkeeper.name}\n                    </Text>\n                  </View>\n                </View>\n\n                {selectedShopkeeper.phone && (\n                  <TouchableOpacity \n                    style={styles.callButton}\n                    onPress={() => callShopkeeper(selectedShopkeeper.phone, selectedShopkeeper.name)}\n                  >\n                    <Text style={styles.callButtonIcon}>📞</Text>\n                    <Text style={styles.callButtonText}>Call: {selectedShopkeeper.phone}</Text>\n                  </TouchableOpacity>\n                )}\n\n                {selectedShopkeeper.email && (\n                  <View style={styles.shopkeeperContactItem}>\n                    <Text style={styles.contactIcon}>📧</Text>\n                    <Text style={styles.contactText}>{selectedShopkeeper.email}</Text>\n                  </View>\n                )}\n\n                {selectedShopkeeper.address && (\n                  <View style={styles.shopkeeperContactItem}>\n                    <Text style={styles.contactIcon}>📍</Text>\n                    <Text style={styles.contactText}>{selectedShopkeeper.address}</Text>\n                  </View>\n                )}\n\n                <View style={styles.shopkeeperActions}>\n                  <TouchableOpacity \n                    style={styles.whatsappButton}\n                    onPress={() => {\n                      if (selectedShopkeeper.phone) {\n                        const message = `Hi ${selectedShopkeeper.name}, I have a query regarding my order.`;\n                        const whatsappUrl = `whatsapp://send?phone=${selectedShopkeeper.phone}&text=${encodeURIComponent(message)}`;\n                        Linking.openURL(whatsappUrl).catch(() => {\n                          Alert.alert('Error', 'WhatsApp is not installed on your device');\n                        });\n                      } else {\n                        Alert.alert('Error', 'Phone number not available');\n                      }\n                    }}\n                  >\n                    <Text style={styles.whatsappButtonText}>💬 WhatsApp</Text>\n                  </TouchableOpacity>\n\n                  <TouchableOpacity \n                    style={styles.smsButton}\n                    onPress={() => {\n                      if (selectedShopkeeper.phone) {\n                        const message = `Hi ${selectedShopkeeper.name}, I have a query regarding my order.`;\n                        const smsUrl = `sms:${selectedShopkeeper.phone}?body=${encodeURIComponent(message)}`;\n                        Linking.openURL(smsUrl).catch(() => {\n                          Alert.alert('Error', 'Unable to open SMS app');\n                        });\n                      } else {\n                        Alert.alert('Error', 'Phone number not available');\n                      }\n                    }}\n                  >\n                    <Text style={styles.smsButtonText}>💬 SMS</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      {/* Add Address Modal */}\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={addressModalVisible}\n        onRequestClose={() => setAddressModalVisible(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={styles.addressModalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Add Delivery Address</Text>\n              <TouchableOpacity \n                onPress={() => setAddressModalVisible(false)}\n                style={styles.closeButton}\n              >\n                <Text style={styles.closeButtonText}>✕</Text>\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView style={styles.addressForm}>\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>Street Address *</Text>\n                <TextInput\n                  style={styles.addressInput}\n                  placeholder=\"Enter street address\"\n                  value={newAddress.street}\n                  onChangeText={(text) => setNewAddress(prev => ({ ...prev, street: text }))}\n                  multiline\n                  placeholderTextColor=\"#999\"\n                />\n              </View>\n\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>City *</Text>\n                <TextInput\n                  style={styles.addressInput}\n                  placeholder=\"Enter city\"\n                  value={newAddress.city}\n                  onChangeText={(text) => setNewAddress(prev => ({ ...prev, city: text }))}\n                  placeholderTextColor=\"#999\"\n                />\n              </View>\n\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>State *</Text>\n                <TextInput\n                  style={styles.addressInput}\n                  placeholder=\"Enter state\"\n                  value={newAddress.state}\n                  onChangeText={(text) => setNewAddress(prev => ({ ...prev, state: text }))}\n                  placeholderTextColor=\"#999\"\n                />\n              </View>\n\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>Pin Code *</Text>\n                <TextInput\n                  style={styles.addressInput}\n                  placeholder=\"Enter pin code\"\n                  value={newAddress.pincode}\n                  onChangeText={(text) => setNewAddress(prev => ({ ...prev, pincode: text }))}\n                  keyboardType=\"numeric\"\n                  placeholderTextColor=\"#999\"\n                />\n              </View>\n\n              <View style={styles.addressButtonsContainer}>\n                <TouchableOpacity \n                  style={styles.addressCancelButton}\n                  onPress={() => {\n                    setAddressModalVisible(false);\n                    setNewAddress({ street: '', city: '', state: '', pincode: '' });\n                  }}\n                >\n                  <Text style={styles.addressCancelButtonText}>Cancel</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity \n                  style={styles.addressSaveButton}\n                  onPress={saveUserAddress}\n                >\n                  <Text style={styles.addressSaveButtonText}>Save Address</Text>\n                </TouchableOpacity>\n              </View>\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n\n      {/* Cash Payment Modal */}\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={paymentModalVisible}\n        onRequestClose={() => setPaymentModalVisible(false)}\n      >\n        <View style={styles.modalOverlay}>\n          <View style={styles.paymentModalContent}>\n            <Text style={styles.paymentModalTitle}>💰 Confirm Cash Payment</Text>\n            \n            {selectedOrder && (\n              <>\n                <View style={styles.paymentAmountContainer}>\n                  <Text style={styles.paymentAmountLabel}>Amount to Pay:</Text>\n                  <Text style={styles.paymentAmount}>₹{selectedOrder.total || selectedOrder.totalAmount}</Text>\n                </View>\n                \n                <TextInput\n                  style={styles.cashInput}\n                  placeholder=\"Enter cash amount paid\"\n                  value={cashAmount}\n                  onChangeText={setCashAmount}\n                  keyboardType=\"numeric\"\n                  placeholderTextColor=\"#999\"\n                />\n                \n                <View style={styles.paymentButtonsContainer}>\n                  <TouchableOpacity \n                    style={styles.paymentCancelButton}\n                    onPress={() => {\n                      setPaymentModalVisible(false);\n                      setCashAmount('');\n                    }}\n                  >\n                    <Text style={styles.paymentCancelButtonText}>Cancel</Text>\n                  </TouchableOpacity>\n                  \n                  <TouchableOpacity \n                    style={styles.paymentConfirmButton}\n                    onPress={() => confirmCashPayment(selectedOrder.id, selectedOrder.total || selectedOrder.totalAmount)}\n                  >\n                    <Text style={styles.paymentConfirmButtonText}>Confirm Payment</Text>\n                  </TouchableOpacity>\n                </View>\n              </>\n            )}\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f9fa',\n  },\n  header: {\n    backgroundColor: '#fff',\n    paddingHorizontal: 20,\n    paddingTop: 60,\n    paddingBottom: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e1e8ed',\n  },\n  greetingSection: {\n    marginBottom: 10,\n  },\n  greeting: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1a202c',\n    marginBottom: 4,\n  },\n  subGreeting: {\n    fontSize: 16,\n    color: '#718096',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f8f9fa',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: '#718096',\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f8f9fa',\n    paddingHorizontal: 40,\n  },\n  emptyIcon: {\n    fontSize: 64,\n    marginBottom: 20,\n  },\n  emptyText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#2d3748',\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  emptySubtext: {\n    fontSize: 16,\n    color: '#718096',\n    textAlign: 'center',\n  },\n  listContainer: {\n    padding: 20,\n  },\n  orderCard: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  orderHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  orderIdContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  orderIdLabel: {\n    fontSize: 14,\n    color: '#718096',\n    marginRight: 4,\n  },\n  orderId: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#1a202c',\n  },\n  statusBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 20,\n  },\n  statusIcon: {\n    fontSize: 12,\n    marginRight: 4,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: '#fff',\n  },\n  orderDate: {\n    fontSize: 14,\n    color: '#718096',\n    marginBottom: 12,\n  },\n  itemsPreview: {\n    marginBottom: 16,\n  },\n  itemsRow: {\n    flexDirection: 'column',\n  },\n  itemPreview: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  itemImage: {\n    width: 40,\n    height: 40,\n    borderRadius: 6,\n    marginRight: 12,\n  },\n  itemDetails: {\n    flex: 1,\n  },\n  itemName: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#1a202c',\n    marginBottom: 2,\n  },\n  itemQuantity: {\n    fontSize: 12,\n    color: '#718096',\n  },\n  itemPrice: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#4A90E2',\n  },\n  moreItemsContainer: {\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  moreItems: {\n    fontSize: 12,\n    color: '#718096',\n    fontStyle: 'italic',\n  },\n  noItems: {\n    fontSize: 14,\n    color: '#718096',\n    fontStyle: 'italic',\n    textAlign: 'center',\n  },\n  orderFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#e2e8f0',\n    marginBottom: 12,\n  },\n  paymentInfo: {\n    flex: 1,\n  },\n  paymentMethodContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  paymentMethodLabel: {\n    fontSize: 12,\n    color: '#718096',\n    marginRight: 4,\n  },\n  paymentMethod: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#1a202c',\n  },\n  paymentStatusBadge: {\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 10,\n    alignSelf: 'flex-start',\n  },\n  paymentStatusText: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    color: '#fff',\n  },\n  totalContainer: {\n    alignItems: 'flex-end',\n  },\n  totalLabel: {\n    fontSize: 12,\n    color: '#718096',\n    marginBottom: 2,\n  },\n  totalAmount: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#1a202c',\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  contactButton: {\n    backgroundColor: '#4A90E2',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n    flex: 1,\n    minWidth: 120,\n  },\n  contactButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  cancelButton: {\n    backgroundColor: '#dc3545',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n    flex: 1,\n    minWidth: 120,\n  },\n  cancelButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  payButton: {\n    backgroundColor: '#28a745',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n    flex: 1,\n    minWidth: 120,\n  },\n  payButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: '#fff',\n    borderRadius: 20,\n    padding: 20,\n    width: width * 0.9,\n    maxHeight: '80%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  modalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1a202c',\n  },\n  closeButton: {\n    width: 30,\n    height: 30,\n    borderRadius: 15,\n    backgroundColor: '#f7fafc',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  closeButtonText: {\n    fontSize: 18,\n    color: '#718096',\n  },\n  orderDetailSection: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#1a202c',\n    marginBottom: 12,\n  },\n  infoRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  infoLabel: {\n    fontSize: 14,\n    color: '#718096',\n  },\n  infoValue: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#1a202c',\n  },\n  addressContainer: {\n    backgroundColor: '#f7fafc',\n    padding: 12,\n    borderRadius: 8,\n  },\n  addressText: {\n    fontSize: 14,\n    color: '#1a202c',\n    marginBottom: 4,\n  },\n  noAddressContainer: {\n    backgroundColor: '#f7fafc',\n    padding: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  noAddress: {\n    fontSize: 14,\n    color: '#718096',\n    marginBottom: 8,\n  },\n  addAddressButton: {\n    backgroundColor: '#4A90E2',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 6,\n  },\n  addAddressButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  modalItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e2e8f0',\n  },\n  modalItemImage: {\n    width: 50,\n    height: 50,\n    borderRadius: 8,\n    marginRight: 12,\n  },\n  modalItemDetails: {\n    flex: 1,\n  },\n  modalItemName: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#1a202c',\n    marginBottom: 4,\n  },\n  modalItemPrice: {\n    fontSize: 12,\n    color: '#718096',\n  },\n  modalItemTotal: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#1a202c',\n  },\n  summaryContainer: {\n    backgroundColor: '#f7fafc',\n    padding: 12,\n    borderRadius: 8,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 4,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: '#718096',\n  },\n  summaryValue: {\n    fontSize: 14,\n    color: '#1a202c',\n  },\n  totalRow: {\n    borderTopWidth: 1,\n    borderTopColor: '#e2e8f0',\n    paddingTop: 8,\n    marginTop: 8,\n  },\n  totalLabel: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#1a202c',\n  },\n  totalValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#1a202c',\n  },\n  notesText: {\n    fontSize: 14,\n    color: '#1a202c',\n    backgroundColor: '#f7fafc',\n    padding: 12,\n    borderRadius: 8,\n  },\n  modalActionButtons: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n    marginTop: 10,\n  },\n  modalContactButton: {\n    backgroundColor: '#4A90E2',\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    borderRadius: 8,\n    flex: 1,\n    minWidth: 120,\n  },\n  modalContactButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  modalCancelButton: {\n    backgroundColor: '#dc3545',\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    borderRadius: 8,\n    flex: 1,\n    minWidth: 120,\n  },\n  modalCancelButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  modalPayButton: {\n    backgroundColor: '#28a745',\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    borderRadius: 8,\n    flex: 1,\n    minWidth: 120,\n  },\n  modalPayButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  shopkeeperModalContent: {\n    backgroundColor: '#fff',\n    borderRadius: 20,\n    padding: 20,\n    width: width * 0.9,\n    maxHeight: '70%',\n  },\n  shopkeeperDetails: {\n    paddingVertical: 10,\n  },\n  shopkeeperHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  shopkeeperIcon: {\n    fontSize: 40,\n    marginRight: 15,\n  },\n  shopkeeperInfo: {\n    flex: 1,\n  },\n  shopkeeperName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#1a202c',\n    marginBottom: 4,\n  },\n  shopkeeperOwner: {\n    fontSize: 14,\n    color: '#718096',\n  },\n  callButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#28a745',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 10,\n    marginBottom: 15,\n  },\n  callButtonIcon: {\n    fontSize: 18,\n    marginRight: 10,\n  },\n  callButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  shopkeeperContactItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    backgroundColor: '#f7fafc',\n    borderRadius: 8,\n    marginBottom: 10,\n  },\n  contactIcon: {\n    fontSize: 16,\n    marginRight: 12,\n  },\n  contactText: {\n    fontSize: 14,\n    color: '#1a202c',\n    flex: 1,\n  },\n  shopkeeperActions: {\n    flexDirection: 'row',\n    gap: 10,\n    marginTop: 15,\n  },\n  whatsappButton: {\n    backgroundColor: '#25D366',\n    paddingVertical: 10,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    flex: 1,\n  },\n  whatsappButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  smsButton: {\n    backgroundColor: '#007AFF',\n    paddingVertical: 10,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    flex: 1,\n  },\n  smsButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  addressModalContent: {\n    backgroundColor: '#fff',\n    borderRadius: 20,\n    padding: 20,\n    width: width * 0.9,\n    maxHeight: '80%',\n  },\n  addressForm: {\n    maxHeight: 400,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#1a202c',\n    marginBottom: 6,\n  },\n  addressInput: {\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 10,\n    fontSize: 14,\n    color: '#1a202c',\n  },\n  addressButtonsContainer: {\n    flexDirection: 'row',\n    gap: 10,\n    marginTop: 20,\n  },\n  addressCancelButton: {\n    backgroundColor: '#e2e8f0',\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n    flex: 1,\n  },\n  addressCancelButtonText: {\n    color: '#718096',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  addressSaveButton: {\n    backgroundColor: '#4A90E2',\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n    flex: 1,\n  },\n  addressSaveButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  paymentModalContent: {\n    backgroundColor: '#fff',\n    borderRadius: 20,\n    padding: 20,\n    width: width * 0.9,\n  },\n  paymentModalTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1a202c',\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  paymentAmountContainer: {\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  paymentAmountLabel: {\n    fontSize: 16,\n    color: '#718096',\n    marginBottom: 8,\n  },\n  paymentAmount: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1a202c',\n  },\n  cashInput: {\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    fontSize: 16,\n    color: '#1a202c',\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  paymentButtonsContainer: {\n    flexDirection: 'row',\n    gap: 10,\n  },\n  paymentCancelButton: {\n    backgroundColor: '#e2e8f0',\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n    flex: 1,\n  },\n  paymentCancelButtonText: {\n    color: '#718096',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  paymentConfirmButton: {\n    backgroundColor: '#28a745',\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n    flex: 1,\n  },\n  paymentConfirmButtonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n});\n\nexport default Orders;","size_bytes":54673},"functions/index.js":{"content":"const functions = require(\"firebase-functions\");\nconst { Resend } = require(\"resend\");\n\nconst resend = new Resend(\"re_UKG2H2nw_38GWE7vQb9Zy13As4w1e3n7m\");\n\nexports.notifyShopkeeper = functions.https.onCall(async (data, context) => {\n  const { to, shopName, orderId, items, total, customerPhone } = data;\n\n  const itemListHtml = items.map(item => `\n    <li>${item.quantity} × ${item.name} - ₹${item.price}</li>\n  `).join('');\n\n  try {\n    const emailResponse = await resend.emails.send({\n      from: \"Lightupswift <onboarding@resend.dev>\",\n      to,\n      subject: `New Order Received - ${shopName}`,\n      html: `\n        <h2>You received a new order!</h2>\n        <p><strong>Order ID:</strong> ${orderId}</p>\n        <p><strong>Shop:</strong> ${shopName}</p>\n        <p><strong>Total:</strong> ₹${total}</p>\n        <p><strong>Customer Phone:</strong> ${customerPhone}</p>\n        <ul>${itemListHtml}</ul>\n      `\n    });\n\n    return { success: true, emailResponse };\n  } catch (error) {\n    console.error(\"Error sending shopkeeper email:\", error);\n    return { success: false, error: error.message };\n  }\n});\n\n","size_bytes":1117},"app/products/[id].tsx":{"content":"import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useLocalSearchParams, useRouter } from 'expo-router';\nimport {\n    addDoc,\n    collection,\n    deleteDoc,\n    doc,\n    getDoc,\n    getDocs,\n    query,\n    setDoc,\n    updateDoc,\n    where\n} from 'firebase/firestore';\nimport React, { useEffect, useState } from 'react';\nimport {\n    ActivityIndicator,\n    Dimensions,\n    Image,\n    SafeAreaView,\n    ScrollView,\n    Share,\n    StyleSheet,\n    Text,\n    TouchableOpacity,\n    View\n} from 'react-native';\nimport Toast from 'react-native-toast-message';\nimport { auth, db } from '../../firebaseConfig'; // Adjust path as needed\n\nconst { width } = Dimensions.get('window');\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  imageUrl: string;\n  images?: string[];\n  category: string;\n  rating?: number;\n  reviewCount?: number;\n  shopId?: string;\n  shopName?: string;\n  tags?: string[];\n  specifications?: Record<string, string>;\n  trending?: boolean;\n  discount?: number;\n  originalPrice?: number;\n}\n\ninterface CartItem {\n  productId: string;\n  quantity: number;\n  price: number;\n  name: string;\n  image: string;\n}\n\ninterface WishlistItem {\n  id: string;\n  productId: string;\n}\n\nexport default function ProductDetail() {\n  const { id } = useLocalSearchParams<{ id: string }>();\n  const router = useRouter();\n  \n  const [product, setProduct] = useState<Product | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [quantity, setQuantity] = useState(1);\n  const [isInWishlist, setIsInWishlist] = useState(false);\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [wishlistItems, setWishlistItems] = useState<WishlistItem[]>([]);\n  const [relatedProducts, setRelatedProducts] = useState<Product[]>([]);\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\n  const [currentCartQuantity, setCurrentCartQuantity] = useState(0);\n\n  useEffect(() => {\n    if (id) {\n      fetchProductDetails();\n      checkAuthState();\n    }\n  }, [id]);\n\n  useEffect(() => {\n    if (product && userLoggedIn) {\n      fetchUserData();\n    }\n  }, [product, userLoggedIn]);\n\n  useEffect(() => {\n    // Update current cart quantity when cartItems change\n    const cartItem = cartItems.find(item => item.productId === id);\n    setCurrentCartQuantity(cartItem ? cartItem.quantity : 0);\n  }, [cartItems, id]);\n\n  const checkAuthState = () => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setUserLoggedIn(!!user);\n      if (user) {\n        fetchCartItems(user.uid);\n        fetchWishlistItems(user.uid);\n      } else {\n        setCartItems([]);\n        setWishlistItems([]);\n        setCurrentCartQuantity(0);\n      }\n    });\n    return unsubscribe;\n  };\n\n  const fetchProductDetails = async () => {\n    try {\n      setLoading(true);\n      const productRef = doc(db, 'products', id as string);\n      const productSnap = await getDoc(productRef);\n      \n      if (productSnap.exists()) {\n        const productData = { id: productSnap.id, ...productSnap.data() } as Product;\n        setProduct(productData);\n        \n        // Update recently viewed\n        updateRecentlyViewed(productData);\n        \n        // Fetch related products\n        fetchRelatedProducts(productData.category, productData.id);\n      } else {\n        Toast.show({\n          type: 'error',\n          text1: 'Product not found'\n        });\n        router.back();\n      }\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Failed to load product'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchRelatedProducts = async (category: string, currentProductId: string) => {\n    try {\n      const productsRef = collection(db, 'products');\n      const q = query(productsRef, where('category', '==', category));\n      const querySnapshot = await getDocs(q);\n      \n      const related = querySnapshot.docs\n        .map(doc => ({ id: doc.id, ...doc.data() } as Product))\n        .filter(p => p.id !== currentProductId)\n        .slice(0, 4);\n      \n      setRelatedProducts(related);\n    } catch (error) {\n      console.error(\"Error fetching related products:\", error);\n    }\n  };\n\n  const updateRecentlyViewed = async (productData: Product) => {\n    try {\n      const storedItems = await AsyncStorage.getItem('recentlyViewed');\n      let recentlyViewed = storedItems ? JSON.parse(storedItems) : [];\n      \n      const existingIndex = recentlyViewed.findIndex((item: Product) => item.id === productData.id);\n      if (existingIndex !== -1) {\n        recentlyViewed.splice(existingIndex, 1);\n      }\n      \n      recentlyViewed.unshift(productData);\n      recentlyViewed = recentlyViewed.slice(0, 5);\n      \n      await AsyncStorage.setItem('recentlyViewed', JSON.stringify(recentlyViewed));\n    } catch (error) {\n      console.error(\"Error updating recently viewed:\", error);\n    }\n  };\n\n  const fetchUserData = async () => {\n    if (!auth.currentUser) return;\n    \n    try {\n      const userId = auth.currentUser.uid;\n      await Promise.all([\n        fetchCartItems(userId),\n        fetchWishlistItems(userId)\n      ]);\n    } catch (error) {\n      console.error(\"Error fetching user data:\", error);\n    }\n  };\n\n  const fetchCartItems = async (userId: string) => {\n    try {\n      const cartRef = doc(db, \"carts\", userId);\n      const cartSnap = await getDoc(cartRef);\n      \n      if (cartSnap.exists()) {\n        const cartData = cartSnap.data();\n        const items = cartData.items || [];\n        setCartItems(items);\n      } else {\n        setCartItems([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching cart items:\", error);\n      setCartItems([]);\n    }\n  };\n\n  const fetchWishlistItems = async (userId: string) => {\n    try {\n      const wishlistRef = collection(db, 'users', userId, 'wishlist');\n      const wishlistSnapshot = await getDocs(wishlistRef);\n      \n      const wishlistData = wishlistSnapshot.docs.map(doc => ({\n        id: doc.id,\n        productId: doc.data().productId\n      }));\n      \n      setWishlistItems(wishlistData);\n      setIsInWishlist(wishlistData.some(item => item.productId === id));\n    } catch (error) {\n      console.error(\"Error fetching wishlist items:\", error);\n    }\n  };\n\n  const handleAddToCart = async () => {\n    if (!product) return;\n\n    try {\n      if (!auth.currentUser) {\n        Toast.show({\n          type: 'info',\n          text1: 'Please log in to add items to cart'\n        });\n        router.push('/auth/login');\n        return;\n      }\n\n      const userId = auth.currentUser.uid;\n      const cartRef = doc(db, \"carts\", userId);\n      const cartSnap = await getDoc(cartRef);\n      \n      let items: CartItem[] = [];\n      if (cartSnap.exists()) {\n        items = [...(cartSnap.data().items || [])];\n      }\n\n      const safeProduct: CartItem = {\n        productId: product.id,\n        quantity: quantity,\n        price: product.price || 0,\n        name: product.name || \"Unnamed Product\",\n        image: product.imageUrl || \"\"\n      };\n\n      const existingIndex = items.findIndex(item => \n        item && item.productId === product.id\n      );\n\n      if (existingIndex >= 0) {\n        items[existingIndex].quantity += quantity;\n        Toast.show({\n          type: 'success',\n          text1: `Added ${quantity} more ${product.name} to cart`\n        });\n      } else {\n        items.push(safeProduct);\n        Toast.show({\n          type: 'success',\n          text1: `${product.name} added to cart`\n        });\n      }\n\n      const total = items.reduce((sum, item) => {\n        return sum + ((item.price || 0) * (item.quantity || 0));\n      }, 0);\n\n      // Update or create cart document\n      if (cartSnap.exists()) {\n        await updateDoc(cartRef, {\n          items: items.filter(item => item),\n          updatedAt: new Date(),\n          total: total\n        });\n      } else {\n        await setDoc(cartRef, {\n          items: items.filter(item => item),\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          total: total\n        });\n      }\n\n      // Refresh cart items to update UI immediately\n      await fetchCartItems(userId);\n      \n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Failed to add item to cart'\n      });\n    }\n  };\n\n  const toggleWishlist = async () => {\n    if (!userLoggedIn) {\n      Toast.show({\n        type: 'info',\n        text1: 'Please log in to add to wishlist'\n      });\n      router.push('/auth/login');\n      return;\n    }\n    \n    try {\n      const userId = auth.currentUser!.uid;\n      \n      if (isInWishlist) {\n        const wishlistItemId = wishlistItems.find(item => item.productId === id)?.id;\n        if (wishlistItemId) {\n          await deleteDoc(doc(db, 'users', userId, 'wishlist', wishlistItemId));\n          Toast.show({\n            type: 'success',\n            text1: 'Removed from wishlist'\n          });\n        }\n      } else {\n        await addDoc(collection(db, 'users', userId, 'wishlist'), {\n          productId: id,\n          addedAt: new Date()\n        });\n        Toast.show({\n          type: 'success',\n          text1: 'Added to wishlist'\n        });\n      }\n      \n      setIsInWishlist(!isInWishlist);\n      await fetchWishlistItems(userId);\n    } catch (error) {\n      console.error(\"Error updating wishlist:\", error);\n      Toast.show({\n        type: 'error',\n        text1: 'Failed to update wishlist'\n      });\n    }\n  };\n\n  const handleShare = async () => {\n    if (!product) return;\n    \n    try {\n      await Share.share({\n        message: `Check out ${product.name} - ₹${product.price}\\n\\nGet it now!`,\n        title: product.name\n      });\n    } catch (error) {\n      console.error(\"Error sharing:\", error);\n    }\n  };\n\n  const renderImageCarousel = () => {\n    const images = product?.images && product.images.length > 0 \n      ? product.images \n      : product?.imageUrl ? [product.imageUrl] : [];\n\n    if (images.length === 0) return null;\n\n    return (\n      <View style={styles.imageContainer}>\n        <ScrollView\n          horizontal\n          pagingEnabled\n          showsHorizontalScrollIndicator={false}\n          onMomentumScrollEnd={(event) => {\n            const index = Math.round(event.nativeEvent.contentOffset.x / width);\n            setCurrentImageIndex(index);\n          }}\n        >\n          {images.map((image, index) => (\n            <Image\n              key={index}\n              source={{ uri: image }}\n              style={styles.productImage}\n              resizeMode=\"cover\"\n            />\n          ))}\n        </ScrollView>\n        \n        {images.length > 1 && (\n          <View style={styles.imageIndicators}>\n            {images.map((_, index) => (\n              <View\n                key={index}\n                style={[\n                  styles.indicator,\n                  currentImageIndex === index && styles.activeIndicator\n                ]}\n              />\n            ))}\n          </View>\n        )}\n      </View>\n    );\n  };\n\n  const renderRelatedProducts = () => {\n    if (relatedProducts.length === 0) return null;\n\n    return (\n      <View style={styles.relatedSection}>\n        <Text style={styles.sectionTitle}>Related Products</Text>\n        <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n          {relatedProducts.map((relatedProduct) => (\n            <TouchableOpacity\n              key={relatedProduct.id}\n              style={styles.relatedProductCard}\n              onPress={() => router.push(`/products/${relatedProduct.id}`)}\n            >\n              <Image\n                source={{ uri: relatedProduct.imageUrl }}\n                style={styles.relatedProductImage}\n              />\n              <Text style={styles.relatedProductName} numberOfLines={2}>\n                {relatedProduct.name}\n              </Text>\n              <Text style={styles.relatedProductPrice}>\n                ₹{relatedProduct.price}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </View>\n    );\n  };\n\n  if (loading) {\n    return (\n      <SafeAreaView style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\n        <Text style={styles.loadingText}>Loading product...</Text>\n      </SafeAreaView>\n    );\n  }\n\n  if (!product) {\n    return (\n      <SafeAreaView style={styles.errorContainer}>\n        <Text style={styles.errorText}>Product not found</Text>\n        <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>\n          <Text style={styles.backButtonText}>Go Back</Text>\n        </TouchableOpacity>\n      </SafeAreaView>\n    );\n  }\n\n  const discountedPrice = product.discount && product.originalPrice \n    ? product.originalPrice - (product.originalPrice * product.discount / 100)\n    : product.price;\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => router.back()}>\n          <Ionicons name=\"arrow-back\" size={24} color=\"#000\" />\n        </TouchableOpacity>\n        <View style={styles.headerActions}>\n          <TouchableOpacity onPress={handleShare} style={styles.headerButton}>\n            <Ionicons name=\"share-outline\" size={24} color=\"#000\" />\n          </TouchableOpacity>\n          <TouchableOpacity onPress={toggleWishlist} style={styles.headerButton}>\n            <Ionicons \n              name={isInWishlist ? \"heart\" : \"heart-outline\"} \n              size={24} \n              color={isInWishlist ? \"#FF6B6B\" : \"#000\"} \n            />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        {/* Product Images */}\n        {renderImageCarousel()}\n\n        {/* Product Info */}\n        <View style={styles.productInfo}>\n          <View style={styles.titleSection}>\n            <Text style={styles.productName}>{product.name}</Text>\n            {product.trending && (\n              <View style={styles.trendingBadge}>\n                <Text style={styles.trendingText}>Trending</Text>\n              </View>\n            )}\n          </View>\n\n          {/* Rating */}\n          {product.rating && (\n            <View style={styles.ratingContainer}>\n              <Ionicons name=\"star\" size={16} color=\"#FFD700\" />\n              <Text style={styles.ratingText}>\n                {product.rating} ({product.reviewCount || 0} reviews)\n              </Text>\n            </View>\n          )}\n\n          {/* Price */}\n          <View style={styles.priceContainer}>\n            <Text style={styles.currentPrice}>₹{discountedPrice}</Text>\n            {product.discount && product.originalPrice && (\n              <>\n                <Text style={styles.originalPrice}>₹{product.originalPrice}</Text>\n                <View style={styles.discountBadge}>\n                  <Text style={styles.discountText}>{product.discount}% OFF</Text>\n                </View>\n              </>\n            )}\n          </View>\n\n          {/* Quantity Selector */}\n          <View style={styles.quantitySection}>\n            <Text style={styles.quantityLabel}>Quantity:</Text>\n            <View style={styles.quantityControls}>\n              <TouchableOpacity \n                style={[styles.quantityButton, quantity <= 1 && styles.disabledButton]}\n                onPress={() => setQuantity(Math.max(1, quantity - 1))}\n                disabled={quantity <= 1}\n              >\n                <Text style={styles.quantityButtonText}>-</Text>\n              </TouchableOpacity>\n              <Text style={styles.quantityText}>{quantity}</Text>\n              <TouchableOpacity \n                style={styles.quantityButton}\n                onPress={() => setQuantity(quantity + 1)}\n              >\n                <Text style={styles.quantityButtonText}>+</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n\n          {/* Description */}\n          <View style={styles.descriptionSection}>\n            <Text style={styles.sectionTitle}>Description</Text>\n            <Text style={styles.description}>{product.description}</Text>\n          </View>\n\n          {/* Specifications */}\n          {product.specifications && Object.keys(product.specifications).length > 0 && (\n            <View style={styles.specificationsSection}>\n              <Text style={styles.sectionTitle}>Specifications</Text>\n              {Object.entries(product.specifications).map(([key, value]) => (\n                <View key={key} style={styles.specificationRow}>\n                  <Text style={styles.specificationKey}>{key}:</Text>\n                  <Text style={styles.specificationValue}>{value}</Text>\n                </View>\n              ))}\n            </View>\n          )}\n\n          {/* Tags */}\n          {product.tags && product.tags.length > 0 && (\n            <View style={styles.tagsSection}>\n              <Text style={styles.sectionTitle}>Tags</Text>\n              <View style={styles.tagsContainer}>\n                {product.tags.map((tag, index) => (\n                  <View key={index} style={styles.tag}>\n                    <Text style={styles.tagText}>{tag}</Text>\n                  </View>\n                ))}\n              </View>\n            </View>\n          )}\n\n          {/* Related Products */}\n          {renderRelatedProducts()}\n        </View>\n      </ScrollView>\n\n      {/* Bottom Actions */}\n      <View style={styles.bottomActions}>\n        {currentCartQuantity > 0 && (\n          <Text style={styles.cartQuantityText}>\n            {currentCartQuantity} in cart\n          </Text>\n        )}\n        <TouchableOpacity \n          style={styles.addToCartButton}\n          onPress={handleAddToCart}\n        >\n          <MaterialCommunityIcons name=\"cart-plus\" size={20} color=\"#fff\" />\n          <Text style={styles.addToCartText}>\n            {currentCartQuantity > 0 ? 'Add More to Cart' : 'Add to Cart'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: '#666',\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    padding: 20,\n  },\n  errorText: {\n    fontSize: 18,\n    color: '#666',\n    marginBottom: 20,\n  },\n  backButton: {\n    backgroundColor: '#4CAF50',\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 8,\n  },\n  backButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f0f0f0',\n  },\n  headerActions: {\n    flexDirection: 'row',\n  },\n  headerButton: {\n    marginLeft: 16,\n  },\n  content: {\n    flex: 1,\n  },\n  imageContainer: {\n    position: 'relative',\n  },\n  productImage: {\n    width: width,\n    height: width * 0.8,\n  },\n  imageIndicators: {\n    position: 'absolute',\n    bottom: 16,\n    left: 0,\n    right: 0,\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  indicator: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n    backgroundColor: 'rgba(255, 255, 255, 0.5)',\n    marginHorizontal: 4,\n  },\n  activeIndicator: {\n    backgroundColor: '#fff',\n  },\n  productInfo: {\n    padding: 20,\n  },\n  titleSection: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  productName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333',\n    flex: 1,\n    marginRight: 12,\n  },\n  trendingBadge: {\n    backgroundColor: '#FF6B35',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  trendingText: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  ratingContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  ratingText: {\n    marginLeft: 4,\n    fontSize: 14,\n    color: '#666',\n  },\n  priceContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  currentPrice: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#4CAF50',\n    marginRight: 12,\n  },\n  originalPrice: {\n    fontSize: 18,\n    color: '#999',\n    textDecorationLine: 'line-through',\n    marginRight: 8,\n  },\n  discountBadge: {\n    backgroundColor: '#FF6B35',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  discountText: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  quantitySection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  quantityLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginRight: 16,\n    color: '#333',\n  },\n  quantityControls: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#ddd',\n    borderRadius: 8,\n  },\n  quantityButton: {\n    width: 40,\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f8f8f8',\n  },\n  disabledButton: {\n    opacity: 0.5,\n  },\n  quantityButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333',\n  },\n  quantityText: {\n    paddingHorizontal: 20,\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333',\n  },\n  descriptionSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 12,\n  },\n  description: {\n    fontSize: 16,\n    lineHeight: 24,\n    color: '#666',\n  },\n  specificationsSection: {\n    marginBottom: 24,\n  },\n  specificationRow: {\n    flexDirection: 'row',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f0f0f0',\n  },\n  specificationKey: {\n    flex: 1,\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#333',\n  },\n  specificationValue: {\n    flex: 2,\n    fontSize: 14,\n    color: '#666',\n  },\n  tagsSection: {\n    marginBottom: 24,\n  },\n  tagsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  tag: {\n    backgroundColor: '#f0f0f0',\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n    marginRight: 8,\n    marginBottom: 8,\n  },\n  tagText: {\n    fontSize: 12,\n    color: '#666',\n  },\n  relatedSection: {\n    marginTop: 24,\n  },\n  relatedProductCard: {\n    width: 120,\n    marginRight: 16,\n  },\n  relatedProductImage: {\n    width: 120,\n    height: 120,\n    borderRadius: 8,\n    marginBottom: 8,\n  },\n    bottomNav: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    paddingVertical: 16,\n    shadowColor: '#6366F1',\n    shadowOffset: { width: 0, height: -2 },\n    shadowOpacity: 0.06,\n    shadowRadius: 8,\n    elevation: 8,\n  },\n  navItem: {\n    alignItems: 'center',\n    padding: 8,\n    borderRadius: 12,\n    minWidth: 60,\n  },\n  activeNavItem: {\n    backgroundColor: '#EEF2FF',\n  },\n  navText: {\n    fontSize: 12,\n    color: '#64748B',\n    marginTop: 6,\n    fontWeight: '600',\n  },\n  activeNavText: {\n    color: '#6366F1',\n    fontWeight: '700',\n  },\n  relatedProductName: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#333',\n    marginBottom: 4,\n  },\n  relatedProductPrice: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#4CAF50',\n  },\n  bottomActions: {\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    borderTopWidth: 1,\n    borderTopColor: '#f0f0f0',\n    backgroundColor: '#fff',\n  },\n  cartQuantityText: {\n    textAlign: 'center',\n    marginBottom: 8,\n    fontSize: 12,\n    color: '#666',\n  },\n  addToCartButton: {\n    flexDirection: 'row',\n    backgroundColor: '#4CAF50',\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  addToCartText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginLeft: 8,\n  },\n});","size_bytes":24294}},"version":1}